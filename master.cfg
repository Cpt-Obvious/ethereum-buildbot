# -*- python -*-
# ex: set syntax=python:
import re

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# using simplejson instead of json since Twisted wants ascii instead of unicode
import simplejson as json

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

# Load slaves from external file, see slaves.json.sample
c['slaves'] = []
for slave in json.load(open("slaves.json")):
    c['slaves'].append(BuildSlave(slave['name'], slave['password']))

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

def _is_pull_request(refspec):
    m = re.match(r"^refs\/pull\/(\d+)/head$", refspec)
    return False if m == None else True

for poller in [
    GitPoller(
        'https://github.com/ethereum/ethereum-buildbot.git',
        branch='master',
        project='ethereum-buildbot',
        pollinterval=300),
    GitPoller(
        'https://github.com/ethereum/cpp-ethereum.git',
        branches=['master', 'develop'],
        project='cpp-ethereum',
        pollinterval=300),
    GitPoller(
        'https://github.com/ethereum/go-ethereum.git',
        branches=['master', 'develop'],
        project='go-ethereum',
        pollinterval=300),
    GitPoller(
        'https://github.com/ethereum/ethereumj.git',
        branch='master',
        project='ethereumj',
        pollinterval=300),
    GitPoller(
        'https://github.com/ethereum/pyethereum.git',
        branch='master',
        project='pyethereum',
        pollinterval=300),
    GitPoller(
        'https://github.com/ethereum/serpent.git',
        branch='master',
        project='serpent',
        pollinterval=300),
    GitPoller(
        'https://github.com/caktux/homebrew-ethereum.git',
        branch='master',
        project='brew',
        pollinterval=300),

    # Pull requests
    GitPoller(
        'http://github.com/ethereum/cpp-ethereum.git',
        branches=_is_pull_request,
        project='cpp-ethereum',
        category='pull-request',
        # pollAtLaunch=True,
        pollinterval=900),
    GitPoller(
        'http://github.com/ethereum/go-ethereum.git',
        branches=_is_pull_request,
        project='go-ethereum',
        category='pull-request',
        pollinterval=900),
    GitPoller(
        'http://github.com/ethereum/pyethereum.git',
        branches=_is_pull_request,
        project='pyethereum',
        category='pull-request',
        pollinterval=900),
    GitPoller(
        'http://github.com/ethereum/ethereumj.git',
        branches=_is_pull_request,
        project='ethereumj',
        category='pull-request',
        pollinterval=900)
]: c['change_source'].append(poller)

all_repositories = {
    r'https://github.com/ethereum/ethereum-buildbot.git': 'ethereum-buildbot',
    r'https://github.com/ethereum/ethereum-dockers.git': 'ethereum-dockers',
    r'https://github.com/ethereum/cpp-ethereum.git': 'cpp-ethereum',
    r'http://github.com/ethereum/cpp-ethereum.git': 'cpp-ethereum',
    r'https://github.com/ethereum/go-ethereum.git': 'go-ethereum',
    r'http://github.com/ethereum/go-ethereum.git': 'go-ethereum',
    r'https://github.com/ethereum/eth-go.git': 'eth-go',
    r'https://github.com/ethereum/go-build.git': 'go-build',
    r'https://github.com/ethereum/ethereumj.git': 'ethereumj',
    r'http://github.com/ethereum/ethereumj.git': 'ethereumj',
    r'https://github.com/ethereum/pyethereum.git': 'pyethereum',
    r'http://github.com/ethereum/pyethereum.git': 'pyethereum',
    r'https://github.com/ethereum/serpent.git': 'serpent',
    r'https://github.com/ethereum/tests.git': 'tests',
    r'https://github.com/caktux/homebrew-ethereum.git': 'homebrew-ethereum'
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'docker' build

from buildbot.schedulers.basic import AnyBranchScheduler, SingleBranchScheduler
from buildbot.schedulers.forcesched import *
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes import filter
c['schedulers'] = []

self_codebases={
    'ethereum-buildbot': {
        'repository': 'https://github.com/ethereum/ethereum-buildbot.git',
        'branch': 'master',
        'revision': None
    }
}
dockers_codebases={
    'ethereum-dockers': {
        'repository': 'https://github.com/ethereum/ethereum-dockers.git',
        'branch': 'master',
        'revision': None
    }
}
cpp_ethereum_codebases={
    'cpp-ethereum': {
        'repository': 'https://github.com/ethereum/cpp-ethereum.git',
        'branch': None,
        'revision': None
    },
    'tests': {
        'repository': 'https://github.com/ethereum/tests.git',
        'branch': None,
        'revision': None
    }
}
go_ethereum_codebases={
    'go-ethereum': {
        'repository': 'https://github.com/ethereum/go-ethereum.git',
        'branch': None,
        'revision': None
    },
    'eth-go': {
        'repository': 'https://github.com/ethereum/eth-go.git',
        'branch': None,
        'revision': None
    },
    'go-build': {
        'repository': 'https://github.com/ethereum/go-build.git',
        'branch': None,
        'revision': None
    }
}
ethereumj_codebases={
    'ethereumj': {
        'repository': 'https://github.com/ethereum/ethereumj.git',
        'branch': 'master',
        'revision': None
    }
}
pyethereum_codebases={
    'pyethereum': {
        'repository': 'https://github.com/ethereum/pyethereum.git',
        'branch': 'master',
        'revision': None
    }
}
serpent_codebases={
    'serpent': {
        'repository': 'https://github.com/ethereum/serpent.git',
        'branch': 'master',
        'revision': None
    }
}
brew_codebases={
    'homebrew-ethereum': {
        'repository': 'https://github.com/caktux/homebrew-ethereum.git',
        'branch': 'master',
        'revision': None
    }
}

all_cpp_ethereum_codebases=cpp_ethereum_codebases.copy()
all_cpp_ethereum_codebases.update(brew_codebases)

all_go_ethereum_codebases=go_ethereum_codebases.copy()
all_go_ethereum_codebases.update(brew_codebases)

all_ethereumj_codebases=ethereumj_codebases.copy()

all_pyethereum_codebases=pyethereum_codebases.copy()

all_serpent_codebases=serpent_codebases.copy()

all_brew_cpp_codebases=cpp_ethereum_codebases.copy()
all_brew_cpp_codebases.update(brew_codebases)

all_brew_go_codebases=go_ethereum_codebases.copy()
all_brew_go_codebases.update(brew_codebases)

for scheduler in [
    SingleBranchScheduler(
        name="ethereum-buildbot-git",
        change_filter=filter.ChangeFilter(project='ethereum-buildbot', branch='master'),
        codebases=self_codebases,
        treeStableTimer=60,
        builderNames=["buildbot"]),
]: c['schedulers'].append(scheduler)

for branch in ['master', 'develop']:
    for scheduler in [
        SingleBranchScheduler(
            name="cpp-ethereum-%s-git" % branch,
            change_filter=filter.ChangeFilter(project='cpp-ethereum', branch=branch),
            codebases=all_cpp_ethereum_codebases,
            treeStableTimer=300,
            builderNames=[
                "Linux C++ %s branch" % branch,
                "OSX C++ %s branch" % branch,
                "Windows C++ %s branch" % branch]),
        SingleBranchScheduler(
            name="go-ethereum-%s-git" % branch,
            change_filter=filter.ChangeFilter(project='go-ethereum', branch=branch),
            codebases=all_go_ethereum_codebases,
            treeStableTimer=300,
            builderNames=[
                "Linux Go %s branch" % branch,
                "OSX Go %s branch" % branch]),
        SingleBranchScheduler(
            name="cpp-ethereum-%s-brew-git" % branch,
            change_filter=filter.ChangeFilter(project='cpp-ethereum', branch=branch),
            codebases=all_brew_cpp_codebases,
            treeStableTimer=300,
            builderNames=["OSX C++ %s brew" % branch]),
        SingleBranchScheduler(
            name="go-ethereum-%s-brew-git" % branch,
            change_filter=filter.ChangeFilter(project='go-ethereum', branch=branch),
            codebases=all_brew_go_codebases,
            treeStableTimer=300,
            builderNames=["OSX Go %s brew" % branch])
    ]: c['schedulers'].append(scheduler)

    for architecture in ['i386', 'amd64']:
        for distribution in ['trusty', 'utopic']:
            for scheduler in [
                Triggerable(
                    name="cpp-ethereum-%s-%s-%s" % (branch, architecture, distribution),
                    builderNames=["Linux C++ %s deb %s-%s" % (branch, architecture, distribution)])
            ]: c['schedulers'].append(scheduler)

for scheduler in [
    SingleBranchScheduler(
        name="ethereumj-git",
        change_filter=filter.ChangeFilter(project='ethereumj', branch='master'),
        codebases=all_ethereumj_codebases,
        treeStableTimer=300,
        builderNames=["Linux EthereumJ"]),
    SingleBranchScheduler(
        name="pyethereum-git",
        change_filter=filter.ChangeFilter(project='pyethereum', branch='master'),
        codebases=all_pyethereum_codebases,
        treeStableTimer=300,
        builderNames=["Linux PyEthereum"]),
    SingleBranchScheduler(
        name="serpent-git",
        change_filter=filter.ChangeFilter(project='serpent', branch='master'),
        codebases=all_serpent_codebases,
        treeStableTimer=300,
        builderNames=["Linux Serpent"]),

    # Brew
    SingleBranchScheduler(
        name="brew-cpp-git",
        change_filter=filter.ChangeFilter(project='brew', branch='master'),
        codebases=all_brew_cpp_codebases,
        treeStableTimer=300,
        builderNames=["OSX C++ master brew", "OSX C++ develop brew"]),
    SingleBranchScheduler(
        name="brew-go-git",
        change_filter=filter.ChangeFilter(project='brew', branch='master'),
        codebases=all_brew_go_codebases,
        treeStableTimer=300,
        builderNames=["OSX Go master brew", "OSX Go develop brew"]),

    # Pull requests
    AnyBranchScheduler(
        name="cpp-ethereum-develop-pr-git",
        change_filter=filter.ChangeFilter(project='cpp-ethereum', category='pull-request'),
        codebases=all_cpp_ethereum_codebases,
        treeStableTimer=300,
        builderNames=[
            "Linux C++ pull requests"
        ]),
    AnyBranchScheduler(
        name="go-ethereum-develop-pr-git",
        change_filter=filter.ChangeFilter(project='go-ethereum', category='pull-request'),
        codebases=all_go_ethereum_codebases,
        treeStableTimer=300,
        builderNames=[
            "Linux Go pull requests"
        ]),
    AnyBranchScheduler(
        name="pyethereum-pr-git",
        change_filter=filter.ChangeFilter(project='pyethereum', category='pull-request'),
        codebases=all_pyethereum_codebases,
        treeStableTimer=300,
        builderNames=[
            "Linux PyEthereum PRs"
        ]),
    AnyBranchScheduler(
        name="ethereumj-pr-git",
        change_filter=filter.ChangeFilter(project='ethereumj', category='pull-request'),
        codebases=all_ethereumj_codebases,
        treeStableTimer=300,
        builderNames=[
            "Linux EthereumJ PRs"
        ])
]: c['schedulers'].append(scheduler)


#
# Forced schedulers
#
for scheduler in [
    ForceScheduler(
        name="force-self-update",
        builderNames=["buildbot"],
        codebases=["ethereum-buildbot"]),
    ForceScheduler(
        name="force-buildslave-cpp",
        builderNames=["buildslave-cpp"],
        codebases=["ethereum-dockers"]),
    ForceScheduler(
        name="force-buildslave-go",
        builderNames=["buildslave-go"],
        codebases=["ethereum-dockers"]),
    ForceScheduler(
        name="force-buildslave-python",
        builderNames=["buildslave-python"],
        codebases=["ethereum-dockers"]),
    ForceScheduler(
        name="force-buildslave-java",
        builderNames=["buildslave-java"],
        codebases=["ethereum-dockers"])
]: c['schedulers'].append(scheduler)

for branch in ['master', 'develop']:
    for scheduler in [
        ForceScheduler(
            name="force-cpp-ethereum-%s" % branch,
            builderNames=["Linux C++ %s branch" % branch],
            codebases=["cpp-ethereum", "tests"]),
        ForceScheduler(
            name="force-go-ethereum-%s" % branch,
            builderNames=["Linux Go %s branch" % branch],
            codebases=["go-ethereum", "eth-go"]),
        ForceScheduler(
            name="force-cpp-ethereum-%s-osx" % branch,
            builderNames=["OSX C++ %s branch" % branch],
            codebases=["cpp-ethereum"]),
        ForceScheduler(
            name="force-go-ethereum-%s-osx" % branch,
            builderNames=["OSX Go %s branch" % branch],
            codebases=["go-ethereum", "eth-go", "go-build"]),
        ForceScheduler(
            name="force-cpp-ethereum-%s-brew" % branch,
            builderNames=["OSX C++ %s brew" % branch],
            codebases=["homebrew-ethereum", "cpp-ethereum"]),
        ForceScheduler(
            name="force-go-ethereum-%s-brew" % branch,
            builderNames=["OSX Go %s brew" % branch],
            codebases=["homebrew-ethereum", "eth-go", "go-ethereum"]),
        ForceScheduler(
            name="force-cpp-ethereum-%s-win" % branch,
            builderNames=["Windows C++ %s branch" % branch])
    ]: c['schedulers'].append(scheduler)

for scheduler in [
    ForceScheduler(
        name="force-ethereumj",
        builderNames=["Linux EthereumJ"],
        codebases=["ethereumj"]),
    ForceScheduler(
        name="force-pyethereum",
        builderNames=["Linux PyEthereum"],
        codebases=["pyethereum"]),
    ForceScheduler(
        name="force-serpent",
        builderNames=["Linux Serpent"],
        codebases=["serpent"]),

    # Pull requests
    ForceScheduler(
        name="force-cpp-ethereum-pr",
        builderNames=["Linux C++ pull requests"],
        codebases=["cpp-ethereum", "tests"]),
    ForceScheduler(
        name="force-go-ethereum-pr",
        builderNames=["Linux Go pull requests"],
        codebases=["go-ethereum"]),
    ForceScheduler(
        name="force-pyethereum-pr",
        builderNames=["Linux PyEthereum PRs"],
        codebases=["pyethereum"]),
    ForceScheduler(
        name="force-ethereumj-pr",
        builderNames=["Linux EthereumJ PRs"],
        codebases=["ethereumj"]),

    Nightly(
        name="nightly-buildslave-cpp",
        builderNames=["buildslave-cpp"],
        codebases=dockers_codebases,
        branch=None,
        hour=3,
        minute=0),
    Nightly(
        name="nightly-buildslave-go",
        builderNames=["buildslave-go"],
        codebases=dockers_codebases,
        branch=None,
        hour=3,
        minute=0),
    Nightly(
        name="nightly-buildslave-python",
        builderNames=["buildslave-python"],
        codebases=dockers_codebases,
        branch=None,
        hour=3,
        minute=30),
    Nightly(
        name="nightly-buildslave-java",
        builderNames=["buildslave-java"],
        codebases=dockers_codebases,
        branch=None,
        hour=3,
        minute=30)
]: c['schedulers'].append(scheduler)

# for architecture in ['i386', 'amd64']:
for distribution in ['trusty', 'utopic']:
    for scheduler in [
        # Triggerable(
        #     name="libcryptopp-%s-%s" % (architecture, distribution),
        #     builderNames=["libcryptopp %s-%s" % (architecture, distribution)]),
        # Triggerable(
        #     name="libjson-rpc-cpp-%s-%s" % (architecture, distribution),
        #     builderNames=["libjson-rpc-cpp %s-%s" % (architecture, distribution)]),
        ForceScheduler(
            name="force-libcryptopp-%s-%s" % ("amd64", distribution),
            builderNames=["libcryptopp %s-%s" % ("amd64", distribution)],
            # codebases=["cryptopp"],
            repository=FixedParameter(name="repository", default=""),
            project=FixedParameter(name="project", default=""),
            branch=FixedParameter(name="branch", default="master"),
            revision=
                StringParameter(
                    name="revision",
                    label="Revision:<br>",
                    default="81fd1114fa64ee680ad642063aa29c3f62a44cdd",
                    required=True,
                    size=40),
            properties=[
                StringParameter(
                    name="version",
                    label="Version:<br>",
                    default="5.6.2",
                    required=True,
                    size=20)
            ]),
        ForceScheduler(
            name="force-libjson-rpc-cpp-%s-%s" % ("amd64", distribution),
            builderNames=["libjson-rpc-cpp %s-%s" % ("amd64", distribution)],
            # codebases=["json-rpc-cpp"],
            repository=FixedParameter(name="repository", default=""),
            project=FixedParameter(name="project", default=""),
            branch=FixedParameter(name="branch", default="master"),
            revision=
                StringParameter(
                    name="revision",
                    label="Revision:<br>",
                    default="eaca2481e2889d5a5b748383fb02b1d395969cd4",
                    required=True,
                    size=40),
            properties=[
                StringParameter(
                    name="version",
                    label="Version:<br>",
                    default="0.2.1",
                    required=True,
                    size=10)
            ])
    ]: c['schedulers'].append(scheduler)

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process import properties
from buildbot.process.properties import Interpolate
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.master import MasterShellCommand, SetProperty
from buildbot.steps.package.deb.lintian import DebLintian
from buildbot.steps.package.deb.pbuilder import UbuCowbuilder
from buildbot.steps.shell import Configure, Compile, SetPropertyFromCommand, ShellCommand, Test
from buildbot.steps.transfer import FileDownload, FileUpload, DirectoryUpload
from buildbot.steps.trigger import Trigger
from buildbot.status.results import SUCCESS, WARNINGS, SKIPPED # FAILURE, EXCEPTION, RETRY
from buildbot import locks

self_lock = locks.SlaveLock("self_update", maxCount = 1)
build_lock = locks.SlaveLock("slave_builds", maxCount = 2)
package_lock = locks.SlaveLock("slave_packaging", maxCount = 4)
go_lock = locks.SlaveLock("go_builds", maxCount = 1)
osx_lock = locks.SlaveLock("osx_builds", maxCount = 1)
win_lock = locks.SlaveLock("win_builds", maxCount = 1)

# def _no_warnings(self):
#     fail = False
#     steps = self.build.getStatus().getSteps()
#     for step in steps:
#         (step_result, text) = step.getResults()
#         if step_result != SUCCESS and step_result != SKIPPED and step_result != None:
#             fail = True
#     if fail:
#         return False
#     else:
#         return True

@properties.renderer
def get_time_string(props):
    import time
    return time.strftime("%Y%m%d%H%M%S", time.localtime())

@properties.renderer
def get_cpp_revision(props):
    if props.has_key('got_revision'):
        return props['got_revision']['cpp-ethereum']
    return None

@properties.renderer
def get_short_revision(props):
    if props.has_key('got_revision'):
        return props['got_revision']['cpp-ethereum'][:6]
    return None

@properties.renderer
def get_short_revision_go(props):
    if props.has_key('got_revision'):
        return props['got_revision']['go-ethereum'][:6]
    return None

@properties.renderer
def _buildslave_stop_cmd(props):
    if props.has_key('last-container'):
        cmds = []
        for container in props['last-container'].splitlines():
            cmds.append("docker stop %s" % container)
        return " && ".join(cmds)
    return None


#
# Self-update factory
#
def self_update_factory():
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            name = 'Update',
            repourl = 'https://github.com/ethereum/ethereum-buildbot.git',
            mode = 'incremental',
            codebase = 'ethereum-buildbot',
            retry = (5, 3)
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name = 'Copy samples',
            description = 'copying samples',
            descriptionDone = 'copy samples',
            command = 'cp slaves.json.sample slaves.json && cp users.json.sample users.json && cp ircbot.json.sample ircbot.json && cp tokens.json.sample tokens.json'
        ),
        ShellCommand(
            logEnviron = False,
            name = 'Check',
            description = 'running checkconfig',
            descriptionDone = 'checkconfig',
            command = ['buildbot', 'checkconfig', '.'],
            flunkOnWarnings = True,
            flunkOnFailure = True,
            haltOnFailure = True,
            warnOnFailure = False,
            interruptSignal = 15
        ),
        MasterShellCommand(
            haltOnFailure = True,
            name = 'Live update',
            description = 'updating',
            descriptionDone = 'update',
            command = ['git', 'pull']
        ),
        MasterShellCommand(
            haltOnFailure = True,
            name = 'Reload',
            description = 'reloading',
            descriptionDone = 'reload',
            command = ['buildbot', 'reconfig', '.']
        )
    ]: factory.addStep(step)
    return factory


#
# Buildslave factories
#
def buildslave_factory(lang="cpp", client="cpp-ethereum"):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/ethereum-dockers.git',
            mode='incremental',
            codebase='ethereum-dockers',
            retry=(5, 3)
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="cleanup",
            description="cleaning up",
            descriptionDone="clean up",
            command=["./bin/docker-cleanup"],
            decodeRC={0:SUCCESS, 1:WARNINGS, 123:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="docker-%s" % lang,
            description="building %s base" % lang,
            descriptionDone="build %s base" % lang,
            command=["docker", "build", "--no-cache", "-t", "cptobvious/%s-base" % client, "%s-base" % client]
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="docker-%s-push" % lang,
            command=["docker", "push", "cptobvious/%s-base" % client],
            warnOnFailure=True,
            decodeRC={0:SUCCESS, 1:WARNINGS}
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="last-container",
            command="docker ps -a | grep buildslave-%s | awk '{print $1}'" % lang,
            property="last-container"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="buildslave-%s" % lang,
            description="building %s buildslave" % lang,
            descriptionDone="build %s buildslave" % lang,
            command=["docker", "build", "--no-cache", "-t", "cptobvious/buildslave-%s" % lang, "%s-buildslave" % client]
        ),
        ShellCommand(
            warnOnFailure = True,
            logEnviron = False,
            name="buildslave-%s-pr" % lang,
            description="building %s pr buildslave" % lang,
            descriptionDone="build %s pr buildslave" % lang,
            command=["docker", "build", "--no-cache", "-t", "cptobvious/buildslave-%s-pr" % lang, "%s-buildslave-pr" % client]
        )
    ]: factory.addStep(step)

    if lang == 'cpp':
        factory.addStep(
            ShellCommand(
                warnOnFailure = True,
                logEnviron = False,
                name="buildslave-%s-deb" % lang,
                description="building %s deb buildslave" % lang,
                descriptionDone="build %s deb buildslave" % lang,
                command=["docker", "build", "--no-cache", "-t", "cptobvious/buildslave-%s-deb" % lang, "%s-buildslave-deb" % client]
            )
        )

    for step in [
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="buildslave-%s-stop" % lang,
            description="stopping %s buildslave" % lang,
            descriptionDone="stop %s buildslave" % lang,
            command=_buildslave_stop_cmd,
            decodeRC={0:SUCCESS, 1:WARNINGS, 2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="buildslave-%s-run" % lang,
            description="starting %s buildslave" % lang,
            descriptionDone="start %s buildslave" % lang,
            command=["docker", "run", "-d", "-t", "cptobvious/buildslave-%s" % lang]
        ),
        ShellCommand(
            warnOnFailure = True,
            logEnviron = False,
            name="buildslave-%s-pr-run" % lang,
            description="starting %s pr buildslave" % lang,
            descriptionDone="start %s pr buildslave" % lang,
            command=["docker", "run", "-d", "-t", "cptobvious/buildslave-%s-pr" % lang]
        )
    ]: factory.addStep(step)

    if lang == 'cpp':
        factory.addStep(
            ShellCommand(
                warnOnFailure = True,
                logEnviron = False,
                name="buildslave-%s-deb-run" % lang,
                description="starting %s deb buildslave" % lang,
                descriptionDone="start %s deb buildslave" % lang,
                command=["docker", "run", "-d", "--privileged=true", "-t", "cptobvious/buildslave-%s-deb" % lang]
            )
        )

    return factory


#
# Linux factories
#

# C++
def cpp_ethereum_factory(branch='master', deb=False):
    factory = BuildFactory()

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/cpp-ethereum.git',
            branch=branch,
            mode='full',
            method = 'copy',
            codebase='cpp-ethereum',
            retry=(5, 3),
            workdir='cpp-ethereum-%s' % branch
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/tests.git',
            branch=branch,
            mode='incremental',
            codebase='tests',
            retry=(5, 3),
            workdir='tests'
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*c_databaseVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "database",
            workdir = 'cpp-ethereum-%s' % branch
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command='sed -ne "s/.*c_protocolVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property="protocol",
            workdir = 'cpp-ethereum-%s' % branch
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command='sed -ne "s/.*Version = \\"\(.*\)\\";/\\1/p" libdevcore/Common.cpp',
            property="version",
            workdir = 'cpp-ethereum-%s' % branch
        ),
        Configure(
            haltOnFailure = True,
            logEnviron = False,
            command=["cmake", "."],
            workdir='cpp-ethereum-%s' % branch
        ),
        Compile(
            haltOnFailure = True,
            logEnviron = False,
            command="make -j $(cat /proc/cpuinfo | grep processor | wc -l)",
            workdir='cpp-ethereum-%s' % branch
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="installing",
            descriptionDone="install",
            command=["make", "install"],
            workdir='cpp-ethereum-%s' % branch
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="running ldconfig",
            descriptionDone="ldconfig",
            command=["ldconfig"],
            workdir='cpp-ethereum-%s' % branch
        ),
        ShellCommand(
            logEnviron = False,
            name="test-cpp",
            description="testing",
            descriptionDone="test",
            command=["./testeth"],
            env={'CTEST_OUTPUT_ON_FAILURE': '1', 'ETHEREUM_TEST_PATH': Interpolate('%(prop:workdir)s/tests')},
            workdir="cpp-ethereum-%s/test" % branch,
            decodeRC={0:SUCCESS, 1:WARNINGS, 201:WARNINGS}
        ),
        FileDownload(
            haltOnFailure = True,
            descriptionDone="download init script",
            mastersrc="eth-supervisord.conf",
            slavedest="eth-supervisord.conf"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="stop",
            description="stopping",
            descriptionDone="stop",
            command="kill `ps aux | grep 'supervisord -c eth-supervisord.conf' | awk '{print $2}'` && kill `pidof eth`",
            decodeRC={-1: SUCCESS, 0:SUCCESS, 1:WARNINGS, 2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="start",
            description="starting",
            descriptionDone="start",
            command="supervisord -c eth-supervisord.conf && sleep 15",
            logfiles={
                "eth.log": "eth.log",
                "eth.err": "eth.err",
                "supervisord.log": "eth-supervisord.log"
            },
            lazylogfiles=True
        ),
    ]: factory.addStep(step)

    if deb:
        for architecture in ['i386', 'amd64']:
            for distribution in ['trusty', 'utopic']:
                for step in [
                    Trigger(
                        schedulerNames=["cpp-ethereum-%s-%s-%s" % (branch, architecture, distribution)],
                        waitForFinish=False,
                        set_properties={
                            "version": Interpolate("%(prop:version)s")
                        }
                    )
                ]: factory.addStep(step)

    return factory

def deb_factory(name=None, repourl=None, ppabranch=None, branch='master', distribution='trusty', architecture='i386'):
    factory = BuildFactory()

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl=repourl,
            branch=branch,
            mode='full',
            method='copy',
            retry=(5, 3)
        ),

        # Create the source tarball
        ShellCommand(
            name="source-tarball",
            description="creating source tarball",
            descriptionDone="create source tarball",
            command=Interpolate("tar --exclude .git -czf ../%(kw:name)s_%(prop:version)s.orig.tar.gz .", name=name)
        ),

        # Get debian/ directory
        ShellCommand(
            name="get-debian",
            description="getting debian folder",
            descriptionDone="get debian folder",
            command=Interpolate("wget https://github.com/caktux/ethereum-ppa/archive/%(kw:ppabranch)s.tar.gz -O- | tar -zx --exclude package.sh --strip-components=1", ppabranch=ppabranch)
        ),

        # Bump version
        ShellCommand(
            name="bump-debian",
            description="bumping %s deb version" % distribution,
            descriptionDone="bump %s deb version" % distribution,
            command=Interpolate("EMAIL='caktux (Buildserver key) <caktux@gmail.com>' dch -v %(prop:version)s-0~%(kw:dist)s%(prop:buildnumber)s 'git build of %(prop:got_revision)s'", dist=distribution)
        ),

        # Build a source package
        ShellCommand(
            name="source-package",
            description="debuilding %s" % distribution,
            descriptionDone="debuild %s" % distribution,
            command="debuild -S -sa -us -uc"
        ),
    ]: factory.addStep(step)

    # Source only packages for dependencies
    if name == 'ethereum':
        for step in [
            # Set othermirror for pbuilder
            ShellCommand(
                name="pbuilder-opts",
                description="setting pbuilderrc",
                descriptionDone="set pbuilderrc",
                command="echo 'OTHERMIRROR=\"deb [trusted=yes] http://ppa.launchpad.net/ethereum/ethereum/ubuntu %s main|deb-src [trusted=yes] http://ppa.launchpad.net/ethereum/ethereum/ubuntu %s main\"' > ~/.pbuilderrc" % (distribution, distribution),
            ),

            # Package that thing already
            UbuCowbuilder(
                # haltOnFailure=False,
                architecture=architecture,
                distribution=distribution,
                basetgz="/var/cache/pbuilder/%s-%s-ethereum.cow" % (distribution, architecture),
                keyring="/usr/share/keyrings/ubuntu-archive-keyring.gpg"
            )
        ]: factory.addStep(step)

    for step in [
        # Run Lintian
        # DebLintian(
        #     fileloc=Interpolate("%(prop:deb-changes)s")
        # ),

        # Gather artefacts
        ShellCommand(
            name="move-packages",
            haltOnFailure=True,
            description='moving packages',
            descriptionDone='move packages',
            command="mkdir result; mv *.deb ../*.changes ../*.dsc ../*.gz result/",
        ),

        # Upload result folder
        DirectoryUpload(
            slavesrc="result",
            masterdest=Interpolate("public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s"),
            url=Interpolate("/builds/%(prop:buildername)s/%(prop:buildnumber)s"),
        ),

        # Clean latest link
        MasterShellCommand(
            name='clean-latest',
            description='cleaning latest link',
            descriptionDone='clean latest link',
            command=['rm', '-f', Interpolate("public_html/builds/%(prop:buildername)s/latest")]
        ),

        # Link latest
        MasterShellCommand(
            name='link-latest',
            description='linking latest',
            descriptionDone='link latest',
            command=['ln', '-sf', Interpolate("%(prop:buildnumber)s"), Interpolate("public_html/builds/%(prop:buildername)s/latest")]
        ),

        # Create source changes folders
        MasterShellCommand(
            name='mkdir-changes',
            description='mkdir',
            descriptionDone='mkdir',
            command=['mkdir', '-p', Interpolate("changes/%(kw:dist)s/%(kw:arch)s/%(kw:name)s", dist=distribution, arch=architecture, name=name)]
        ),

        # Link source changes
        MasterShellCommand(
            name='link-changes',
            description='linking changes',
            descriptionDone='link changes',
            command=['ln', '-sf', Interpolate("../../../../public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s"), Interpolate("changes/%(kw:dist)s/%(kw:arch)s/%(kw:name)s", dist=distribution, arch=architecture, name=name)]
        ),

        # Prepare .changes file for Launchpad
        MasterShellCommand(
            name='prepare-changes',
            description='preparing changes',
            descriptionDone='prepare changes',
            command=['sed', '-i', '-e', Interpolate('s/UNRELEASED/%(kw:dist)s/', dist=distribution), '-e', 's/urgency=medium/urgency=low/', Interpolate('changes/%(kw:dist)s/%(kw:arch)s/%(kw:name)s/%(prop:buildnumber)s/%(kw:name)s_%(prop:version)s-0~%(kw:dist)s%(prop:buildnumber)s_source.changes', dist=distribution, arch=architecture, name=name)]
        ),

        # debsign
        MasterShellCommand(
            # haltOnFailure=False,
            name='debsign',
            description='debsigning',
            descriptionDone='debsign',
            command=['debsign', Interpolate("changes/%(kw:dist)s/%(kw:arch)s/%(kw:name)s/%(prop:buildnumber)s/%(kw:name)s_%(prop:version)s-0~%(kw:dist)s%(prop:buildnumber)s_source.changes", dist=distribution, arch=architecture, name=name)]
        ),

        # dput
        MasterShellCommand(
            name='dput',
            description='dputting',
            descriptionDone='dput',
            command=['dput', 'ppa:ethereum/ethereum', Interpolate("changes/%(kw:dist)s/%(kw:arch)s/%(kw:name)s/%(prop:buildnumber)s/%(kw:name)s_%(prop:version)s-0~%(kw:dist)s%(prop:buildnumber)s_source.changes", dist=distribution, arch=architecture, name=name)]
        )
    ]: factory.addStep(step)

    return factory


# Go
def _go_cmds(branch='master'):
    cmds = [
        "go get -v -u -d code.google.com/p/go.crypto/ripemd160",

        # initial go get from master branch
        "go get -v -u -d github.com/ethereum/go-ethereum/ethereum",
        "go get -v -u -d github.com/ethereum/go-ethereum/mist",
        # "go get -v -d ./%sethereum" % ("" if branch=='master' else "cmd/"),
        # "go get -v -d ./%smist" % ("" if branch=='master' else "cmd/"),

        # checkout our branch from go get
        "cd $GOPATH/src/github.com/ethereum/go-ethereum",
        "git checkout %s" % branch
    ]

    return " && ".join(cmds)

def go_ethereum_factory(branch='master'):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/go-ethereum.git',
            branch=branch,
            mode='incremental',
            codebase='go-ethereum',
            retry=(5, 3),
            workdir='go-ethereum-%s' % branch
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/eth-go.git',
            branch='master',
            mode='incremental',
            codebase='eth-go',
            retry=(5, 3),
            workdir='eth-go-master'
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*ProtocolVersion = \(.*\)/\\1/p" peer.go',
            property = "protocol",
            workdir='go-ethereum-develop' if branch=='develop' else 'eth-go-master'
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*P2PVersion = \(.*\)/\\1/p" peer.go',
            property = "p2p",
            workdir='go-ethereum-develop' if branch=='develop' else 'eth-go-master'
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*Version.*= \\"\(.*\)\\"/\\1/p" %sethereum/main.go' % ("" if branch=='master' else "cmd/"),
            property = "version",
            workdir='go-ethereum-%s' % branch
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="go-cleanup",
            command="rm -rf $GOPATH",
            description="cleaning up",
            descriptionDone="clean up"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            command=_go_cmds(branch=branch),
            description="go getting",
            descriptionDone="go get",
            workdir='go-ethereum-%s' % branch
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="install-ethereum",
            description="installing ethereum",
            descriptionDone="install ethereum",
            command="cd $GOPATH/src/github.com/ethereum/go-ethereum/%sethereum && go install -v" % ("" if branch=='master' else "cmd/"),
            workdir='go-ethereum-%s' % branch
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="install-mist",
            description="installing mist",
            descriptionDone="install mist",
            command="cd $GOPATH/src/github.com/ethereum/go-ethereum/%smist && go install -v" % ("" if branch=='master' else "cmd/"),
            workdir='go-ethereum-%s' % branch
        ),
        FileDownload(
            haltOnFailure = True,
            descriptionDone="download init script",
            mastersrc="eth-go-supervisord.conf",
            slavedest="eth-go-supervisord.conf"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="stop",
            description="stopping",
            descriptionDone="stop",
            command="kill `ps aux | grep 'supervisord -c eth-go-supervisord.conf' | awk '{print $2}'` && kill `pidof ethereum`",
            decodeRC={-1: SUCCESS, 0:SUCCESS, 1:WARNINGS, 2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="start",
            description="starting",
            descriptionDone="start",
            command="supervisord -c eth-go-supervisord.conf && sleep 15",
            logfiles={
                "ethereum.log": "ethereum.log",
                "ethereum.err": "ethereum.err",
                "supervisord.log": "eth-go-supervisord.log"
            },
            lazylogfiles=True
        )
    ]: factory.addStep(step)
    return factory

# Java
def ethereumj_factory(branch='master'):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/ethereumj.git',
            branch=branch,
            mode='incremental',
            codebase='ethereumj',
            retry=(5, 3),
            workdir='ethereumj'
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="build-ethereumj-core",
            command=["mvn", "package"],
            workdir="ethereumj/ethereumj-core"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="install-ethereumj-core",
            command=["mvn", "install"],
            workdir="ethereumj/ethereumj-core"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="build-ethereumj-studio",
            command=["mvn", "package"],
            workdir="ethereumj/ethereumj-studio"
        )
    ]: factory.addStep(step)
    return factory

# Python
def pyethereum_factory(branch='master'):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/pyethereum.git',
            branch=branch,
            mode='incremental',
            codebase='pyethereum',
            retry=(5, 3),
            workdir='pyethereum'
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="pip-install",
            description="installing",
            descriptionDone="install",
            command=["pip", "install", "-e", "."],
            workdir="pyethereum"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="pyeth-version",
            command=["pyeth", "-v"],
            property="version"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="test-requirements",
            description="installing test requirements",
            descriptionDone="install test requirements",
            command=["pip", "install", "-r", "dev_requirements.txt"],
            workdir="pyethereum"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="test-submodule",
            descriptionDone="update test submodule",
            command="git submodule init && git submodule update --recursive",
            workdir="pyethereum"
        ),
        Test(
            flunkOnWarnings = False,
            flunkOnFailure = False,
            warnOnFailure = False,
            logEnviron = False,
            name="test-behave",
            descriptionDone="behave test",
            command="behave",
            workdir="pyethereum"
        ),
        Test(
            flunkOnWarnings = False,
            flunkOnFailure = False,
            warnOnFailure = False,
            logEnviron = False,
            descriptionDone="py.test",
            name="test-py.test",
            command="py.test",
            workdir="pyethereum"
        )
    ]: factory.addStep(step)
    return factory

@properties.renderer
def _serpent_tests(props):
    cmds = []
    contracts = [
        "namecoin",
        "schellingdollar",
        "subcurrency",
        "cyberdyne/futarchy",
        "cyberdyne/market"
    ]
    for contract in contracts:
        cmds.append("serpent compile %s.se" % contract)
    tests = [
        "cyberdyne/test.py",
        "ecc/test.py"
    ]
    for test in tests:
        cmds.append("py.test %s" % test)
    return " && ".join(cmds)

def serpent_factory():
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/serpent.git',
            branch='master',
            mode='incremental',
            codebase='serpent',
            retry=(5, 3),
            workdir='serpent'
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="pip-install",
            description="installing",
            descriptionDone="install",
            command=["pip", "install", "-e", "."],
            workdir="serpent"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="serpent-version",
            command=["serpent", "-v"],
            property="version"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="test-requirements",
            description="installing test requirements",
            descriptionDone="install test requirements",
            command="pip install pytest && pip install pyethereum"
        ),
        ShellCommand(
            logEnviron = False,
            name="test",
            command=_serpent_tests,
            description="testing",
            descriptionDone="test",
            workdir="serpent/examples",
            decodeRC={0:SUCCESS, 1:WARNINGS, 2:WARNINGS}
        )
    ]: factory.addStep(step)
    return factory


#
# Windows factories
#
def win_cpp_factory(branch='master'):
    # both branches use a shared workdir
    workdir = "../build-cpp-win/build"

    factory = BuildFactory()
    for step in [
        # ShellCommand(
        #     haltOnFailure = True,
        #     logEnviron = False,
        #     name="run windows bootstrap.sh",
        #     command=[r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'bootstrap.sh'],
        #     workdir=workdir),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="clean",
            command=["clean.bat"],
            workdir=workdir
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="checkout",
            command=["checkout_%s.bat" % branch],
            workdir=workdir
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="build",
            command=["compile_ethereum.bat"],
            workdir=workdir + "/cpp-ethereum/windows"
        ),
        # ShellCommand(
        #     haltOnFailure = True,
        #     logEnviron = False,
        #     description="pack",
        #     command=[r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'make_zips.sh'],
        #     workdir=workdir),
        SetPropertyFromCommand(
            command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'git --git-dir=./cpp-ethereum/.git --work-tree=../cpp-ethereum rev-parse HEAD | cut -c1-6'],
            property = "githash",
            workdir = workdir,
        ),
        SetPropertyFromCommand(
            command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', '--login', '-c', 'date +%Y%m%d%H%M%S'],
            property = "timestamp",
            workdir = workdir,
        ),
        SetPropertyFromCommand(
           command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'grep "Version" ./cpp-ethereum/libdevcore/Common.cpp | sed "s/.*\"\(.*\)\".*/\1/"'],
           property = "version",
           workdir = workdir,
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'pack',
            descriptionDone= 'packed',
            command = ['7z', 'a', 'cpp-ethereum.7z', '.\_binaries\*'],
            workdir = workdir
        ),
        FileUpload(
            haltOnFailure = True,
            name = 'upload',
            slavesrc="cpp-ethereum.7z",
            masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/cpp-ethereum-vs2013-%(prop:version)s-%(prop:timestamp)s-%(prop:githash)s.7z"),
            url = Interpolate("/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/cpp-ethereum-vs2013-%(prop:version)s-%(prop:timestamp)s-%(prop:githash)s.7z"),
            workdir = workdir
        ),
        MasterShellCommand(
            description = 'cleaning latest link',
            descriptionDone= 'clean latest link',
            command = ['rm', '-f', Interpolate("public_html/builds/%(prop:buildername)s/latest")]
        ),
        MasterShellCommand(
            haltOnFailure = True,
            description = 'linking latest',
            descriptionDone= 'link latest',
            command = ['ln', '-sf', Interpolate("%(prop:buildnumber)s"), Interpolate("public_html/builds/%(prop:buildername)s/latest")]
        )
    ]: factory.addStep(step)
    return factory


#
# OSX factories
#
def brew_install_cmd(cmd=[], branch='master'):
    if branch == 'develop':
        cmd.append('--devel')
    return cmd

# C++
def osx_cpp_factory(branch='develop'):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/cpp-ethereum.git',
            branch = branch,
            mode = 'full',
            method = 'copy',
            codebase = 'cpp-ethereum',
            retry=(5, 3),
            workdir = 'osx-cpp-ethereum-%s' % branch
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*c_databaseVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "database",
            workdir = 'osx-cpp-ethereum-%s' % branch
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command='sed -ne "s/.*c_protocolVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property="protocol",
            workdir = 'osx-cpp-ethereum-%s' % branch
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command='sed -ne "s/.*Version = \\"\(.*\)\\";/\\1/p" libdevcore/Common.cpp',
            property="version",
            workdir = 'osx-cpp-ethereum-%s' % branch
        ),
        Configure(
            haltOnFailure = True,
            logEnviron = False,
            command = ['cmake', '.'],
            workdir = 'osx-cpp-ethereum-%s' % branch
        ),
        Compile(
            haltOnFailure = True,
            logEnviron = False,
            command = "make -j $(sysctl -n hw.ncpu)",
            workdir = 'osx-cpp-ethereum-%s' % branch
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running make install',
            descriptionDone= 'make install',
            command = ['make', 'install'],
            workdir = 'osx-cpp-ethereum-%s/alethzero' % branch
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'pack AlethZero.app',
            descriptionDone= 'packed AlethZero.app',
            command = ['tar', '-jcvf', 'alethzero/AlethZero.tar.bz2', 'alethzero/AlethZero.app'],
            workdir = 'osx-cpp-ethereum-%s' % branch
        ),
        FileUpload(
            haltOnFailure = True,
            name = 'Upload AlethZero',
            slavesrc="alethzero/AlethZero.tar.bz2",
            masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/AlethZero-OSX-%(kw:time_string)s-%(prop:version)s-%(prop:protocol)s-%(prop:database)s-%(kw:short_revision)s.tar.bz2", time_string=get_time_string, short_revision=get_short_revision),
            url = Interpolate("/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/AlethZero-OSX-%(kw:time_string)s-%(prop:version)s-%(prop:protocol)s-%(prop:database)s-%(kw:short_revision)s.tar.bz2", time_string=get_time_string, short_revision=get_short_revision),
            workdir = 'osx-cpp-ethereum-%s' % branch
        ),
        MasterShellCommand(
            description = 'cleaning latest link',
            descriptionDone= 'clean latest link',
            command = ['rm', '-f', Interpolate("public_html/builds/%(prop:buildername)s/latest")]
        ),
        MasterShellCommand(
            haltOnFailure = True,
            description = 'linking latest',
            descriptionDone= 'link latest',
            command = ['ln', '-sf', Interpolate("%(prop:buildnumber)s"), Interpolate("public_html/builds/%(prop:buildername)s/latest")]
        )
    ]: factory.addStep(step)
    return factory

def brew_cpp_factory(branch='develop'):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/cpp-ethereum.git',
            branch = branch,
            mode = 'incremental',
            codebase = 'cpp-ethereum',
            retry=(5, 3),
            workdir = 'brew-cpp-ethereum'
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/caktux/homebrew-ethereum.git',
            branch = 'master',
            mode = 'incremental',
            codebase = 'homebrew-ethereum',
            retry=(5, 3),
            workdir = 'brew',
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*c_databaseVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "database",
            workdir = 'brew-cpp-ethereum',
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*c_protocolVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "protocol",
            workdir = 'brew-cpp-ethereum',
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*Version = \\"\(.*\)\\";/\\1/p" libdevcore/Common.cpp',
            property = "version",
            workdir = 'brew-cpp-ethereum',
        )
    ]: factory.addStep(step)

    if branch == 'develop':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update version',
                command = Interpolate('sed -i "" "s/^    version \'\(.*\)\'/    version \'%(prop:version)s-%(prop:protocol)s-%(prop:database)s\'/" ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git add',
                command = 'git add ethereum.rb',
                workdir = 'brew',
            ),
            ShellCommand(
                logEnviron = False,
                descriptionDone = 'git commit',
                command = Interpolate('git commit -m "bump to %(prop:version)s-%(prop:protocol)s-%(prop:database)s"'),
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git push',
                command = 'git push',
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS}
            )
        ]: factory.addStep(step)

    for step in [
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'cleanup',
            descriptionDone = 'clean',
            command = ['brew', 'remove', 'ethereum'],
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        Compile(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running brew',
            descriptionDone = 'brew',
            command = brew_install_cmd(cmd=['brew', 'install', 'ethereum.rb', '-v'], branch=branch),
            workdir = 'brew',
        )
    ]: factory.addStep(step)

    if branch == 'develop':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update successful version',
                command = Interpolate('sed -i "" "s/^      version \'\(.*\)\'/      version \'%(prop:version)s-%(prop:protocol)s-%(prop:database)s\'/" ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update successful revision',
                command = Interpolate('sed -i "" "s/:revision => \'\(.*\)\'/:revision => \'%(kw:cpp_revision)s\'/" ethereum.rb', cpp_revision=get_cpp_revision),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git add',
                command = 'git add ethereum.rb',
                workdir = 'brew',
            ),
            ShellCommand(
                logEnviron = False,
                descriptionDone = 'git commit',
                command = Interpolate('git commit -m "bump successful to %(prop:version)s-%(prop:protocol)s-%(prop:database)s at %(kw:cpp_revision)s"', cpp_revision=get_cpp_revision),
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git push',
                command = 'git push',
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'unload',
                command = ['launchctl', 'unload', '/usr/local/opt/ethereum/homebrew.mxcl.ethereum.plist'],
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'load',
                command = ['launchctl', 'load', '/usr/local/opt/ethereum/homebrew.mxcl.ethereum.plist'],
            ),
        ]: factory.addStep(step)
    return factory

# Go
def osx_go_factory(branch='develop'):
    factory = BuildFactory()

    env = {
        "GOPATH": Interpolate("%(prop:workdir)s/go"),
        "PKG_CONFIG_PATH": "/usr/local/opt/qt5/lib/pkgconfig",
        "CGO_CPPFLAGS": "-I/usr/local/opt/qt5/include/QtCore",
        "LD_LIBRARY_PATH": "/usr/local/opt/qt5/lib"
    }

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/go-ethereum.git',
            branch=branch,
            mode='incremental',
            codebase='go-ethereum',
            retry=(5, 3),
            workdir='go-ethereum-%s' % branch
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/eth-go.git',
            branch='master',
            mode='incremental',
            codebase='eth-go',
            retry=(5, 3),
            workdir='eth-go-master'
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/go-build.git',
            branch = 'master',
            mode = 'full',
            method = 'copy',
            codebase = 'go-build',
            retry=(5, 3),
            workdir = 'go-build-%s' % branch
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*ProtocolVersion = \(.*\)/\\1/p" peer.go',
            property = "protocol",
            workdir='go-ethereum-develop' if branch=='develop' else 'eth-go-master'
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*P2PVersion = \(.*\)/\\1/p" peer.go',
            property = "p2p",
            workdir='go-ethereum-develop' if branch=='develop' else 'eth-go-master'
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*Version.*= \\"\(.*\)\\"/\\1/p" %sethereum/main.go' % ("" if branch=='master' else "cmd/"),
            property = "version",
            workdir='go-ethereum-%s' % branch
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="go-cleanup",
            command="rm -rf $GOPATH",
            description="cleaning up",
            descriptionDone="clean up",
            env={"GOPATH": Interpolate("%(prop:workdir)s/go")}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="go getting",
            descriptionDone="go get",
            command=_go_cmds(branch=branch),
            env=env
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="install-ethereum",
            description="installing ethereum",
            descriptionDone="install ethereum",
            command="cd $GOPATH/src/github.com/ethereum/go-ethereum/%sethereum && go install -v" % ("" if branch=='master' else "cmd/"),
            env=env
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="install-mist",
            description="installing mist",
            descriptionDone="install mist",
            command="cd $GOPATH/src/github.com/ethereum/go-ethereum/%smist && go install -v" % ("" if branch=='master' else "cmd/"),
            env=env
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name = "go-build",
            description = 'go build',
            descriptionDone = 'go build',
            command = ['python', 'build.py'],
            workdir = 'go-build-%s/osx' % branch,
            decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS},
            env={"GOPATH": Interpolate("%(prop:workdir)s/go")}
        ),
        FileUpload(
            haltOnFailure = True,
            name = 'Upload Mist',
            slavesrc="osx/Mist.dmg",
            masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/Mist-OSX-%(kw:time_string)s-%(prop:version)s-%(prop:protocol)s-%(kw:short_revision)s.dmg", time_string=get_time_string, short_revision=get_short_revision_go),
            url = Interpolate("/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/Mist-OSX-%(kw:time_string)s-%(prop:version)s-%(prop:protocol)s-%(kw:short_revision)s.dmg", time_string=get_time_string, short_revision=get_short_revision_go),
            workdir = 'go-build-%s' % branch
        ),
        MasterShellCommand(
            description = 'cleaning latest link',
            descriptionDone= 'clean latest link',
            command = ['rm', '-f', Interpolate("public_html/builds/%(prop:buildername)s/latest")]
        ),
        MasterShellCommand(
            haltOnFailure = True,
            description = 'linking latest',
            descriptionDone= 'link latest',
            command = ['ln', '-sf', Interpolate("%(prop:buildnumber)s"), Interpolate("public_html/builds/%(prop:buildername)s/latest")]
        )
    ]: factory.addStep(step)
    return factory

def brew_go_factory(branch='develop'):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/go-ethereum.git',
            branch = branch,
            mode = 'incremental',
            codebase = 'go-ethereum',
            retry=(5, 3),
            workdir = 'brew-go-ethereum-%s' % branch,
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/eth-go.git',
            branch='master',
            mode='incremental',
            codebase='eth-go',
            retry=(5, 3),
            workdir='eth-go-master'
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/caktux/homebrew-ethereum.git',
            branch = 'master',
            mode = 'incremental',
            codebase = 'homebrew-ethereum',
            retry=(5, 3),
            workdir = 'brew',
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*ProtocolVersion = \(.*\)/\\1/p" peer.go',
            property = "protocol",
            workdir='brew-go-ethereum-develop' if branch=='develop' else 'eth-go-master'
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*Version.*= \\"\(.*\)\\"/\\1/p" %sethereum/main.go' % ("" if branch=='master' else "cmd/"),
            property = "version",
            workdir = 'brew-go-ethereum-%s' % branch,
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'cleanup',
            descriptionDone = 'clean',
            command = 'brew remove go-ethereum',
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        Compile(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running brew',
            descriptionDone = 'brew',
            command = brew_install_cmd(cmd=['brew', 'install', 'go-ethereum.rb', '-v'], branch=branch),
            workdir = 'brew',
        )
    ]: factory.addStep(step)

    if branch=='develop':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update go-ethereum version',
                command = Interpolate('sed -i "" "s/^    version \'\(.*\)\'/    version \'%(prop:version)s-%(prop:protocol)s\'/" go-ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git add',
                command = 'git add -u',
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS}
            ),
            ShellCommand(
                logEnviron = False,
                descriptionDone = 'git commit',
                command = Interpolate('git commit -m "bump go-ethereum to %(prop:version)s-%(prop:protocol)s"'),
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git push',
                command = 'git push',
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'unload',
                command = ['launchctl', 'unload', '/usr/local/opt/go-ethereum/homebrew.mxcl.go-ethereum.plist'],
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'load',
                command = ['launchctl', 'load', '/usr/local/opt/go-ethereum/homebrew.mxcl.go-ethereum.plist'],
            ),
        ]: factory.addStep(step)

    return factory


#
# Builders
#
from buildbot.config import BuilderConfig

c['builders'] = []

# Self-update builders
for builder in [
    BuilderConfig(
        name="buildbot",
        builddir="build-self",
        slavenames=["selfslave"],
        factory=self_update_factory(),
        locks=[self_lock.access('exclusive')]),
    BuilderConfig(
        name="buildslave-cpp",
        builddir="build-buildslave-cpp",
        slavenames=["selfslave"],
        factory=buildslave_factory("cpp", "cpp-ethereum"),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="buildslave-go",
        builddir="build-buildslave-go",
        slavenames=["selfslave"],
        factory=buildslave_factory("go", "go-ethereum"),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="buildslave-python",
        builddir="build-buildslave-python",
        slavenames=["selfslave"],
        factory=buildslave_factory("python", "pyethereum"),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="buildslave-java",
        builddir="build-buildslave-java",
        slavenames=["selfslave"],
        factory=buildslave_factory("java", "ethereumj"),
        locks=[build_lock.access('counting')])
]: c['builders'].append(builder)

for branch in ['master', 'develop']:
    for builder in [
        BuilderConfig(
            name="Linux C++ %s branch" % branch,
            builddir="build-cpp-ethereum-%s-docker" % branch,
            slavenames=["slave-cpp"],
            factory=cpp_ethereum_factory(branch=branch, deb=True),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="Linux Go %s branch" % branch,
            builddir="build-go-ethereum-%s-docker" % branch,
            slavenames=["slave-go"],
            factory=go_ethereum_factory(branch=branch),
            locks=[go_lock.access('counting')]),
        BuilderConfig(
            name="OSX C++ %s branch" % branch,
            builddir="build-cpp-osx-%s" % branch,
            slavenames=["osxvps"],
            factory=osx_cpp_factory(branch=branch),
            locks=[osx_lock.access('counting')]),
        BuilderConfig(
            name="OSX Go %s branch" % branch,
            builddir="build-go-osx-%s" % branch,
            slavenames=["osxvps"],
            factory=osx_go_factory(branch=branch),
            locks=[osx_lock.access('counting')]),
        BuilderConfig(
            name="OSX C++ %s brew" % branch,
            builddir="build-cpp-osx-%s-brew" % branch,
            slavenames=["osxvps"],
            factory=brew_cpp_factory(branch=branch),
            locks=[osx_lock.access('counting')]),
        BuilderConfig(
            name="OSX Go %s brew" % branch,
            builddir="build-go-ethereum-%s-brew" % branch,
            slavenames=["osxvps"],
            factory=brew_go_factory(branch=branch),
            locks=[osx_lock.access('counting')]),
        BuilderConfig(
            name="Windows C++ %s branch" % branch,
            builddir="build-cpp-ethereum-%s-win" % branch,
            slavenames=["winslave"],
            factory=win_cpp_factory(branch=branch),
            locks=[win_lock.access('exclusive')])
    ]: c['builders'].append(builder)

    # deb packaging
    for architecture in ['i386', 'amd64']:
        for distribution in ['trusty', 'utopic']:
            for builder in [
                BuilderConfig(
                    name="Linux C++ %s deb %s-%s" % (branch, architecture, distribution),
                    builddir="build-cpp-ethereum-%s-%s-%s" % (branch, architecture, distribution),
                    slavenames=["slave-cpp-deb"],
                    factory=deb_factory(
                        name="ethereum",
                        repourl="https://github.com/ethereum/cpp-ethereum.git",
                        ppabranch="master",
                        branch=branch,
                        architecture=architecture,
                        distribution=distribution),
                    locks=[package_lock.access('counting')])
            ]: c['builders'].append(builder)

# deps deb packaging
# for architecture in ['i386', 'amd64']:
for distribution in ['trusty', 'utopic']:
    for builder in [
        BuilderConfig(
            name="libcryptopp %s-%s" % ("amd64", distribution),
            builddir="build-libcryptopp-%s-%s" % ("amd64", distribution),
            slavenames=["slave-cpp-deb"],
            factory=deb_factory(
                name="libcryptopp",
                repourl="https://github.com/mmoss/cryptopp.git",
                ppabranch="libcrypto++",
                branch="master",
                architecture="amd64",
                distribution=distribution),
            locks=[package_lock.access('counting')]),
        BuilderConfig(
            name="libjson-rpc-cpp %s-%s" % ("amd64", distribution),
            builddir="build-libjson-rpc-cpp-%s-%s" % ("amd64", distribution),
            slavenames=["slave-cpp-deb"],
            factory=deb_factory(
                name="libjson-rpc-cpp",
                repourl="https://github.com/cinemast/libjson-rpc-cpp.git",
                ppabranch="libjson-rpc-cpp",
                branch="master",
                architecture="amd64",
                distribution=distribution),
            locks=[package_lock.access('counting')])
    ]: c['builders'].append(builder)

for builder in [
    BuilderConfig(
        name="Linux EthereumJ",
        builddir="build-ethereumj-docker",
        slavenames=["slave-java"],
        factory=ethereumj_factory(),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="Linux PyEthereum",
        builddir="build-pyethereum-docker",
        slavenames=["slave-python"],
        factory=pyethereum_factory(),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="Linux Serpent",
        builddir="build-serpent-docker",
        slavenames=["slave-python"],
        factory=serpent_factory(),
        locks=[build_lock.access('counting')]),

    # Pull requests
    BuilderConfig(
        name="Linux C++ pull requests",
        builddir="build-cpp-ethereum-pr",
        slavenames=["slave-cpp-pr"],
        factory=cpp_ethereum_factory(branch='develop'),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="Linux Go pull requests",
        builddir="build-go-ethereum-pr",
        slavenames=["slave-go-pr"],
        factory=go_ethereum_factory(branch='develop'),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="Linux PyEthereum PRs",
        builddir="build-pyethereum-pr",
        slavenames=["slave-python-pr"],
        factory=pyethereum_factory(branch='master'),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="Linux EthereumJ PRs",
        builddir="build-ethereumj-pr",
        slavenames=["slave-java-pr"],
        factory=ethereumj_factory(branch='master'),
        locks=[build_lock.access('counting')])
]: c['builders'].append(builder)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status import words
from buildbot.status.web import authz, auth
from buildbot.status.github import GitHubStatus
from buildstatusimage import BuildStatusImageResource

# Load users from external file, see users.json.sample
users = []
for user in json.load(open("users.json")):
    users.append((user['username'], user['password']))

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(users),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)


class WebStatus(html.WebStatus):
    def setupUsualPages(self, numbuilds, num_events, num_events_max):
        html.WebStatus.setupUsualPages(self, numbuilds, num_events, num_events_max)
        self.putChild("buildstatusimage", BuildStatusImageResource())

c['status'].append(WebStatus(http_port=8010, authz=authz_cfg, order_console_by_time=True))


# IRC bot
ircbot = json.load(open("ircbot.json"))
c['status'].append(words.IRC(host=ircbot['server'],
                             nick=ircbot['nickname'],
                             password=ircbot['password'],
                             channels=ircbot['channels'],
                             notify_events={
                                'successToException': 1,
                                'successToFailure': 1,
                                'failureToSuccess': 1,
                                'exceptionToSuccess': 1}))


# GitHub Status
tokens = json.load(open("tokens.json"))
for repo in tokens:
    gs = GitHubStatus(
        token=tokens[repo]["token"],
        repoOwner=tokens[repo]["owner"],
        repoName=repo,
        sha=Interpolate("%(src:"+repo+":revision)s"),
        startDescription='DEV build started.',
        endDescription='DEV build done.')
    c['status'].append(gs)


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Ethereum"
c['titleURL'] = "https://ethereum.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://build.ethdev.com/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
