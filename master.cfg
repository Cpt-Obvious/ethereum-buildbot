# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# using simplejson instead of json since Twisted wants ascii instead of unicode
import simplejson as json

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

# Load slaves from external file, see slaves.json.sample
c['slaves'] = []
for slave in json.load(open("slaves.json")):
    c['slaves'].append(BuildSlave(slave['name'], slave['password']))

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/ethereum-buildbot.git',
        branch='master',
        project='ethereum-buildbot',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/cpp-ethereum.git',
        branches=['master', 'develop'],
        project='cpp-ethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/go-ethereum.git',
        branches=['master', 'develop'],
        project='go-ethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/eth-go.git',
        branches=['master', 'develop'],
        project='go-ethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/ethereumj.git',
        branch='master',
        project='ethereumj',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/pyethereum.git',
        branch='master',
        project='pyethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/serpent.git',
        branch='master',
        project='serpent',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/caktux/homebrew-ethereum.git',
        branch='master',
        project='brew',
        pollinterval=300))

all_repositories = {
    r'https://github.com/ethereum/ethereum-buildbot.git': 'ethereum-buildbot',
    r'https://github.com/ethereum/ethereum-dockers.git': 'ethereum-dockers',
    r'https://github.com/ethereum/cpp-ethereum.git': 'cpp-ethereum',
    r'https://github.com/ethereum/go-ethereum.git': 'go-ethereum',
    r'https://github.com/ethereum/eth-go.git': 'eth-go',
    r'https://github.com/ethereum/ethereumj.git': 'ethereumj',
    r'https://github.com/ethereum/pyethereum.git': 'pyethereum',
    r'https://github.com/ethereum/serpent.git': 'serpent',
    r'https://github.com/caktux/homebrew-ethereum.git': 'brew'
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'docker' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.changes import filter
c['schedulers'] = []

self_codebases={
    'ethereum-buildbot': {
        'repository': 'https://github.com/ethereum/ethereum-buildbot.git',
        'branch': 'master',
        'revision': None
    }
}
dockers_codebases={
    'ethereum-dockers': {
        'repository': 'https://github.com/ethereum/ethereum-dockers.git',
        'branch': 'master',
        'revision': None
    }
}
cpp_ethereum_codebases={
    'cpp-ethereum': {
        'repository': 'https://github.com/ethereum/cpp-ethereum.git',
        'branch': None,
        'revision': None
    }
}
go_ethereum_codebases={
    'go-ethereum': {
        'repository': 'https://github.com/ethereum/go-ethereum.git',
        'branch': None,
        'revision': None
    },
   'eth-go': {
        'repository': 'https://github.com/ethereum/eth-go.git',
        'branch': None,
        'revision': None
    }
}
ethereumj_codebases={
    'ethereumj': {
        'repository': 'https://github.com/ethereum/ethereumj.git',
        'branch': 'master',
        'revision': None
    }
}
pyethereum_codebases={
    'pyethereum': {
        'repository': 'https://github.com/ethereum/pyethereum.git',
        'branch': 'master',
        'revision': None
    }
}
serpent_codebases={
    'serpent': {
        'repository': 'https://github.com/ethereum/serpent.git',
        'branch': 'master',
        'revision': None
    }
}
brew_codebases={
    'brew': {
        'repository': 'https://github.com/caktux/homebrew-ethereum.git',
        'branch': 'master',
        'revision': None
    }
}

all_cpp_ethereum_codebases=dockers_codebases.copy()
all_cpp_ethereum_codebases.update(cpp_ethereum_codebases)
all_cpp_ethereum_codebases.update(brew_codebases)

all_go_ethereum_codebases=dockers_codebases.copy()
all_go_ethereum_codebases.update(go_ethereum_codebases)
all_go_ethereum_codebases.update(brew_codebases)

all_ethereumj_codebases=dockers_codebases.copy()
all_ethereumj_codebases.update(ethereumj_codebases)

all_pyethereum_codebases=dockers_codebases.copy()
all_pyethereum_codebases.update(pyethereum_codebases)

all_serpent_codebases=dockers_codebases.copy()
all_serpent_codebases.update(serpent_codebases)

all_brew_cpp_codebases=cpp_ethereum_codebases.copy()
all_brew_cpp_codebases.update(brew_codebases)

all_brew_go_codebases=go_ethereum_codebases.copy()
all_brew_go_codebases.update(brew_codebases)

# name="Linux C++ %s branch" % branch,
# name="Linux Go %s branch" % branch,
# name="Windows C++ %s branch" % branch,
# name="Linux EthereumJ",
# name="Linux PyEthereum",
# name="Linux Serpent",
# name="OSX C++ develop branch",
# name="OSX C++ develop brew",
# name="OSX Go develop brew",

for scheduler in [
    SingleBranchScheduler(
        name="ethereum-buildbot-git",
        change_filter=filter.ChangeFilter(project='ethereum-buildbot', branch='master'),
        codebases=self_codebases,
        treeStableTimer=60,
        builderNames=["buildbot"]),
    SingleBranchScheduler(
        name="cpp-ethereum-master-git",
        change_filter=filter.ChangeFilter(project='cpp-ethereum', branch='master'),
        codebases=all_cpp_ethereum_codebases,
        treeStableTimer=300,
        builderNames=[
            "Linux C++ master branch",
            "Windows C++ master branch",
            # TODO - "OSX C++ master branch"
        ]),
    SingleBranchScheduler(
        name="cpp-ethereum-develop-git",
        change_filter=filter.ChangeFilter(project='cpp-ethereum', branch='develop'),
        codebases=all_cpp_ethereum_codebases,
        treeStableTimer=300,
        builderNames=[
            "Linux C++ develop branch",
            "OSX C++ develop branch",
            "OSX C++ develop brew",
            "Windows C++ develop branch"
        ])
]: c['schedulers'].append(scheduler)

for branch in ['master', 'develop']:
    for scheduler in [
        SingleBranchScheduler(
            name="go-ethereum-%s-git" % branch,
            change_filter=filter.ChangeFilter(project='go-ethereum', branch=branch),
            codebases=all_go_ethereum_codebases,
            treeStableTimer=300,
            builderNames=["Linux Go %s branch" % branch]),
        SingleBranchScheduler(
            name="eth-go-%s-git" % branch,
            change_filter=filter.ChangeFilter(project='eth-go', branch=branch),
            codebases=all_go_ethereum_codebases,
            treeStableTimer=300,
            builderNames=["Linux Go %s branch" % branch])
    ]: c['schedulers'].append(scheduler)

for scheduler in [
    SingleBranchScheduler(
        name="go-ethereum-brew-git",
        change_filter=filter.ChangeFilter(project='go-ethereum', branch='develop'),
        codebases=all_go_ethereum_codebases,
        treeStableTimer=300,
        builderNames=["OSX Go develop brew"]),
    SingleBranchScheduler(
        name="eth-go-brew-git",
        change_filter=filter.ChangeFilter(project='eth-go', branch='develop'),
        codebases=all_go_ethereum_codebases,
        treeStableTimer=300,
        builderNames=["OSX Go develop brew"]),
    SingleBranchScheduler(
        name="ethereumj-git",
        change_filter=filter.ChangeFilter(project='ethereumj', branch='master'),
        codebases=all_ethereumj_codebases,
        treeStableTimer=300,
        builderNames=["Linux EthereumJ"]),
    SingleBranchScheduler(
        name="pyethereum-git",
        change_filter=filter.ChangeFilter(project='pyethereum', branch='master'),
        codebases=all_pyethereum_codebases,
        treeStableTimer=300,
        builderNames=["Linux PyEthereum"]),
    SingleBranchScheduler(
        name="serpent-git",
        change_filter=filter.ChangeFilter(project='serpent', branch='master'),
        codebases=all_serpent_codebases,
        treeStableTimer=300,
        builderNames=["Linux Serpent"]),
    SingleBranchScheduler(
        name="brew-cpp-git",
        change_filter=filter.ChangeFilter(project='brew', branch='master'),
        codebases=all_brew_cpp_codebases,
        treeStableTimer=300,
        builderNames=["OSX C++ develop brew"]),
    SingleBranchScheduler(
        name="brew-go-git",
        change_filter=filter.ChangeFilter(project='brew', branch='master'),
        codebases=all_brew_go_codebases,
        treeStableTimer=300,
        builderNames=["OSX Go develop brew"])
]: c['schedulers'].append(scheduler)


#
# Forced schedulers
#
for scheduler in [
    ForceScheduler(
        name="force-self-update",
        builderNames=["buildbot"],
        codebases=["ethereum-buildbot"]),
    ForceScheduler(
        name="force-base-dockers",
        builderNames=["buildslave"],
        codebases=["ethereum-dockers"])
]: c['schedulers'].append(scheduler)

for branch in ['master', 'develop']:
    for scheduler in [
        ForceScheduler(
            name="force-cpp-ethereum-%s" % branch,
            builderNames=["Linux C++ %s branch" % branch],
            codebases=["ethereum-dockers", "cpp-ethereum"]),
        ForceScheduler(
            name="force-go-ethereum-%s" % branch,
            builderNames=["Linux Go %s branch" % branch],
            codebases=["ethereum-dockers", "go-ethereum", "eth-go"]),
        ForceScheduler(
            name="force-cpp-ethereum-%s-win" % branch,
            builderNames=["Windows C++ %s branch" % branch])
    ]: c['schedulers'].append(scheduler)

for scheduler in [
    ForceScheduler(
        name="force-ethereumj",
        builderNames=["Linux EthereumJ"],
        codebases=["ethereum-dockers", "ethereumj"]),
    ForceScheduler(
        name="force-pyethereum",
        builderNames=["Linux PyEthereum"],
        codebases=["ethereum-dockers", "pyethereum"]),
    ForceScheduler(
        name="force-serpent",
        builderNames=["Linux Serpent"],
        codebases=["ethereum-dockers", "serpent"]),
    ForceScheduler(
        name="force-cpp-ethereum-osx",
        builderNames=["OSX C++ develop branch"],
        codebases=["cpp-ethereum"]),
    ForceScheduler(
        name="force-cpp-ethereum-brew",
        builderNames=["OSX C++ develop brew"],
        codebases=["brew", "cpp-ethereum"]),
    ForceScheduler(
        name="force-go-ethereum-brew",
        builderNames=["OSX Go develop brew"],
        codebases=["brew", "eth-go", "go-ethereum"]),
    Nightly(
        name="nightly-dockers",
        builderNames=["buildslave"],
        codebases=dockers_codebases,
        branch=None,
        hour=3,
        minute=0)
]: c['schedulers'].append(scheduler)


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process import properties
from buildbot.process.properties import Interpolate
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload
from buildbot.steps import shell
from buildbot.status.results import SUCCESS, WARNINGS, SKIPPED # FAILURE, EXCEPTION, RETRY
from buildbot import locks

self_lock = locks.MasterLock("self_update")
build_lock = locks.SlaveLock("slave_builds", maxCount = 2)
osx_lock = locks.SlaveLock("osx_builds", maxCount = 1)
win_lock = locks.SlaveLock("win_builds", maxCount = 1)

def _no_failures(self):
    fail = False
    steps = self.build.getStatus().getSteps()
    for step in steps:
        (step_result, text) = step.getResults()
        if step_result != SUCCESS and step_result != SKIPPED and step_result != None:
            fail = True
    if fail:
        return False
    else:
        return True

@properties.renderer
def get_cpp_revision(props):
    if props.has_key('got_revision'):
        return props['got_revision']['cpp-ethereum']
    return None

@properties.renderer
def get_time_string(props):
    import time
    return time.strftime("%Y%m%d%H%M%S", time.localtime())

@properties.renderer
def get_short_revision(props):
    if props.has_key('got_revision'):
        return props['got_revision']['cpp-ethereum'][:6]
    return None


#
# Self-update factory
#
def self_update_factory():
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            name = 'Update',
            repourl = 'https://github.com/ethereum/ethereum-buildbot.git',
            mode = 'incremental',
            codebase = 'ethereum-buildbot',
            retry = (5, 3)
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name = 'Copy samples',
            description = 'copying samples',
            descriptionDone = 'copy samples',
            command = 'cp slaves.json.sample slaves.json && cp users.json.sample users.json && cp ircbot.json.sample ircbot.json'
        ),
        ShellCommand(
            logEnviron = False,
            name = 'Check',
            description = 'running checkconfig',
            descriptionDone = 'checkconfig',
            command = ['buildbot', 'checkconfig', '.'],
            flunkOnWarnings = True,
            flunkOnFailure = True,
            haltOnFailure = True,
            warnOnFailure = False,
            interruptSignal = 15
        ),
        MasterShellCommand(
            haltOnFailure = True,
            name = 'Live update',
            description = 'updating',
            descriptionDone = 'update',
            command = 'cd /home/buildbot/master && git pull'
        ),
        MasterShellCommand(
            haltOnFailure = True,
            name = 'Reload',
            description = 'reloading',
            descriptionDone = 'reload',
            command = ['buildbot', 'reconfig', '/home/buildbot/master'],
        )
    ]: factory.addStep(step)
    return factory

#
# Builders factories
#
s_git_checkout_dockers = Git(
    haltOnFailure = True,
    logEnviron = False,
    repourl='https://github.com/ethereum/ethereum-dockers.git',
    mode='incremental',
    codebase='ethereum-dockers'
)

#
# Linux factories
#
def base_docker_factory():
    factory = BuildFactory()
    for step in [
        s_git_checkout_dockers,
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="cleanup",
            description="cleaning up",
            descriptionDone="clean up",
            command=["./bin/docker-cleanup"],
            decodeRC={0:SUCCESS, 1:WARNINGS, 123:WARNINGS}),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="docker",
            description="building docker base",
            descriptionDone="build docker base",
            command=["docker", "build", "--no-cache", "-t", "cptobvious/cpp-ethereum-base", "cpp-ethereum-base"]),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="buildslave",
            description="building buildslave",
            descriptionDone="build buildslave",
            command=["docker", "build", "--no-cache", "-t", "cptobvious/buildslave", "buildslave"]),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="stop_buildslave",
            description="stopping buildslave",
            descriptionDone="stop buildslave",
            command="docker stop $(docker ps -a -q)",
            decodeRC={0:SUCCESS, 1:WARNINGS, 2:WARNINGS}),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="run_buildslave",
            description="starting buildslave",
            descriptionDone="start buildslave",
            command=["docker", "run", "-d", "-t", "cptobvious/buildslave"])
    ]: factory.addStep(step)
    return factory

def cpp_ethereum_factory(branch='master'):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/cpp-ethereum.git',
            branch=branch,
            mode='full',
            method = 'copy',
            codebase='cpp-ethereum',
            workdir='cpp-ethereum-' + branch),
        Configure(
            haltOnFailure = True,
            logEnviron = False,
            command=["cmake", ".", "-DHEADLESS=1"],
            workdir='cpp-ethereum-' + branch),
        Compile(
            haltOnFailure = True,
            logEnviron = False,
            command="make -j $(cat /proc/cpuinfo | grep processor | wc -l)",
            workdir='cpp-ethereum-' + branch),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            command=["make", "install"],
            workdir='cpp-ethereum-' + branch),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            command=["ldconfig"],
            workdir='cpp-ethereum-' + branch),
        # ShellCommand(
        #     haltOnFailure = True,
        #     logEnviron = False,
        #     name="test with eth version",
        #     command=["docker", "run", "--rm", "cptobvious/cpp-ethereum-" + branch, "eth", "-V"]),
        # ShellCommand(
        #     haltOnFailure = True,
        #     logEnviron = False,
        #     name="pushing the cpp-ethereum-%s docker image" % branch,
        #     command=["docker", "push", "cptobvious/cpp-ethereum-%s" % branch],
        #     warnOnFailure=True,
        #     decodeRC={0:SUCCESS, 1:WARNINGS})
    ]: factory.addStep(step)
    return factory

def go_ethereum_factory(branch='master'):
    factory = BuildFactory()
    for step in [
        s_git_checkout_dockers,
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/go-ethereum.git',
            branch=branch,
            mode='incremental',
            codebase='go-ethereum',
            workdir='go-ethereum-' + branch),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/eth-go.git',
            branch=branch,
            mode='incremental',
            codebase='eth-go',
            workdir='eth-go-' + branch),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="build the go-ethereum-base docker image",
            command=["docker", "build", "-t", "cptobvious/go-ethereum-base", "go-ethereum-base"]),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="build the go-ethereum-%s docker image" % branch,
            command=["docker", "build", "--no-cache", "-t", "cptobvious/go-ethereum-" + branch, "go-ethereum-" + branch]),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="pushing the go-ethereum-%s docker image" % branch,
            command=["docker", "push", "cptobvious/go-ethereum-%s" % branch],
            warnOnFailure=True,
            decodeRC={0:SUCCESS, 1:WARNINGS})
    ]: factory.addStep(step)
    return factory

def ethereumj_factory():
    factory = BuildFactory()
    for step in [
        s_git_checkout_dockers,
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/ethereumj.git',
            branch='master',
            mode='incremental',
            codebase='ethereumj',
            workdir='ethereumj'),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="build the ethereumj-base docker image",
            command=["docker", "build", "-t", "cptobvious/ethereumj-base", "ethereumj-base"]),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="build the ethereumj-master docker image",
            command=["docker", "build", "--no-cache", "-t", "cptobvious/ethereumj-package", "ethereumj-package"]),
    ]: factory.addStep(step)
    return factory

def pyethereum_factory():
    factory = BuildFactory()
    for step in [
        s_git_checkout_dockers,
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/pyethereum.git',
            branch='master',
            mode='incremental',
            codebase='pyethereum',
            workdir='pyethereum'),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="build the pyethereum-base docker image",
            command=["docker", "build", "-t", "cptobvious/pyethereum-base", "pyethereum-base"]),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="build the pyethereum-master image",
            command=["docker", "build", "--no-cache", "-t", "cptobvious/pyethereum-master", "pyethereum-master"]),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="test with pyeth version",
            command=["docker", "run", "--rm", "cptobvious/pyethereum-master", "bin/pyeth", "-v"]),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="test with behave",
            command=["docker", "run", "--rm", "cptobvious/pyethereum-master", "bin/behave"]),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="test with py.test",
            command=["docker", "run", "--rm", "cptobvious/pyethereum-master", "bin/py.test"])
    ]: factory.addStep(step)
    return factory

def serpent_factory():
    factory = BuildFactory()
    for step in [
        s_git_checkout_dockers,
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/serpent.git',
            branch='master',
            mode='incremental',
            codebase='serpent',
            workdir='serpent'),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="build the serpent-master docker image",
            command=["docker", "build", "--no-cache", "-t", "cptobvious/serpent-master", "serpent-master"]),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="test with namecoin compilation",
            command=["docker", "run", "--rm", "cptobvious/serpent-master", "serpent", "compile", "/serpent/examples/namecoin.se"])
    ]: factory.addStep(step)
    return factory

#
# Windows factories
#
def win_cpp_factory(branch='master'):
    # both branches use a shared workdir
    workdir = "../build-cpp-win/build"

    factory = BuildFactory()
    for step in [
        # ShellCommand(
        #     haltOnFailure = True,
        #     logEnviron = False,
        #     name="run windows bootstrap.sh",
        #     command=[r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'bootstrap.sh'],
        #     workdir=workdir),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="clean",
            command=["clean.bat"],
            workdir=workdir),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="checkout",
            command=["checkout_%s.bat" % branch],
            workdir=workdir),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="build",
            command=["compile_ethereum.bat"],
            workdir=workdir + "/cpp-ethereum/windows"),
        # ShellCommand(
        #     haltOnFailure = True,
        #     logEnviron = False,
        #     description="pack",
        #     command=[r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'make_zips.sh'],
        #     workdir=workdir),
        shell.SetPropertyFromCommand(
            command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'git --git-dir=./cpp-ethereum/.git --work-tree=../cpp-ethereum rev-parse HEAD | cut -c1-6'],
            property = "githash",
            workdir = workdir,
        ),
        shell.SetPropertyFromCommand(
            command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', '--login', '-c', 'date +%Y%m%d%H%M%S'],
            property = "timestamp",
            workdir = workdir,
        ),
        shell.SetPropertyFromCommand(
           command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'grep "Version" ./cpp-ethereum/libdevcore/Common.cpp | sed "s/.*\"\(.*\)\".*/\1/"'],
           property = "version",
           workdir = workdir,
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'pack',
            descriptionDone= 'packed',
            command = ['7z', 'a', 'cpp-ethereum.7z', '.\_binaries\*'],
            workdir = workdir),
        FileUpload(
            name = 'upload', 
            workdir = workdir, 
            slavesrc="cpp-ethereum.7z", 
            masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/cpp-ethereum-vs2013-%(prop:version)s-%(prop:timestamp)s-%(prop:githash)s.7z"),
            url = Interpolate("/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/cpp-ethereum-vs2013-%(prop:version)s-%(prop:timestamp)s-%(prop:githash)s.7z"))
    ]: factory.addStep(step)
    return factory

#
# OSX factories
#
def osx_cpp_factory():
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/cpp-ethereum.git',
            branch = 'develop',
            mode = 'full',
            method = 'copy',
            codebase = 'cpp-ethereum',
            workdir = 'osx-cpp-ethereum'
        ),
        shell.SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*c_databaseVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "database",
            workdir = 'osx-cpp-ethereum',
        ),
        shell.SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command='sed -ne "s/.*c_protocolVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property="protocol",
            workdir = 'osx-cpp-ethereum',
        ),
        shell.SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command='sed -ne "s/.*Version = \\"\(.*\)\\";/\\1/p" libdevcore/Common.cpp',
            property="version",
            workdir = 'osx-cpp-ethereum',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running cmake',
            descriptionDone= 'cmake',
            command = ['cmake', '.'],
            workdir = 'osx-cpp-ethereum'
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running make',
            descriptionDone= 'make',
            command = ['make', '-j6'],
            workdir = 'osx-cpp-ethereum'
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running make install',
            descriptionDone= 'make install',
            command = ['make', 'install'],
            workdir = 'osx-cpp-ethereum/alethzero'
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'pack AlethZero.app',
            descriptionDone= 'packed AlethZero.app',
            command = ['tar', '-jcvf', 'alethzero/AlethZero.tar.bz2', 'alethzero/AlethZero.app'],
            workdir = 'osx-cpp-ethereum'
        ),
        FileUpload(
            name = 'Upload AlethZero',
            workdir = 'osx-cpp-ethereum',
            slavesrc="alethzero/AlethZero.tar.bz2",
            masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/AlethZero-OSX-%(kw:time_string)s-%(prop:version)s-%(prop:protocol)s-%(prop:database)s-%(kw:short_revision)s.tar.bz2", time_string=get_time_string, short_revision=get_short_revision),
            url = Interpolate("/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/AlethZero-OSX-%(kw:time_string)s-%(prop:version)s-%(prop:protocol)s-%(prop:database)s-%(kw:short_revision)s.tar.bz2", time_string=get_time_string, short_revision=get_short_revision),
        ),
    ]: factory.addStep(step)
    return factory

def brew_cpp_factory():
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/cpp-ethereum.git',
            branch = 'develop',
            mode = 'incremental',
            codebase = 'cpp-ethereum',
            workdir = 'brew-cpp-ethereum'
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/caktux/homebrew-ethereum.git',
            branch = 'master',
            mode = 'incremental',
            codebase = 'brew',
            workdir = 'brew',
        ),
        shell.SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*c_databaseVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "database",
            workdir = 'brew-cpp-ethereum',
        ),
        shell.SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*c_protocolVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "protocol",
            workdir = 'brew-cpp-ethereum',
        ),
        shell.SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*Version = \\"\(.*\)\\";/\\1/p" libdevcore/Common.cpp',
            property = "version",
            workdir = 'brew-cpp-ethereum',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'update version',
            command = Interpolate('sed -i "" "s/    version \'\(.*\)\'/    version \'%(prop:version)s-%(prop:protocol)s-%(prop:database)s\'/" ethereum.rb'),
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'git add',
            command = 'git add ethereum.rb',
            workdir = 'brew',
        ),
        ShellCommand(
            logEnviron = False,
            descriptionDone = 'git commit',
            command = Interpolate('git commit -m "bump to %(prop:version)s-%(prop:protocol)s-%(prop:database)s"'),
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'git push',
            command = 'git push',
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'cleanup',
            descriptionDone = 'clean',
            command = ['brew', 'remove', 'ethereum'],
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running brew',
            descriptionDone = 'brew',
            command = ['brew', 'install', 'ethereum.rb', '--devel', '-v'],
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'update successful version',
            command = Interpolate('sed -i "" "s/      version \'\(.*\)\'/      version \'%(prop:version)s-%(prop:protocol)s-%(prop:database)s\'/" ethereum.rb'),
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'update successful revision',
            command = Interpolate('sed -i "" "s/:revision => \'\(.*\)\'/:revision => \'%(kw:cpp_revision)s\'/" ethereum.rb', cpp_revision=get_cpp_revision),
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'git add',
            command = 'git add ethereum.rb',
            workdir = 'brew',
        ),
        ShellCommand(
            logEnviron = False,
            descriptionDone = 'git commit',
            command = Interpolate('git commit -m "bump successful to %(prop:version)s-%(prop:protocol)s-%(prop:database)s at %(kw:cpp_revision)s"', cpp_revision=get_cpp_revision),
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            doStepIf = _no_failures,
            descriptionDone = 'git push',
            command = 'git push',
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'unload',
            command = ['launchctl', 'unload', '/usr/local/opt/ethereum/homebrew.mxcl.ethereum.plist'],
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'load',
            command = ['launchctl', 'load', '/usr/local/opt/ethereum/homebrew.mxcl.ethereum.plist'],
        ),
    ]: factory.addStep(step)
    return factory

def brew_go_factory():
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/eth-go.git',
            branch = 'develop',
            mode = 'incremental',
            codebase = 'eth-go',
            workdir = 'brew-eth-go'
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/go-ethereum.git',
            branch = 'develop',
            mode = 'incremental',
            codebase = 'go-ethereum',
            workdir = 'brew-go-ethereum'
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/caktux/homebrew-ethereum.git',
            branch = 'master',
            mode = 'incremental',
            codebase = 'brew',
            workdir = 'brew',
        ),
        shell.SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*ProtocolVersion = \(.*\)/\\1/p" peer.go',
            property = "protocol",
            workdir = 'brew-eth-go',
        ),
        shell.SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*Version.*= \\"\(.*\)\\"/\\1/p" ethereum/main.go',
            property = "version",
            workdir = 'brew-go-ethereum',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'cleanup',
            descriptionDone = 'clean',
            command = ['brew', 'remove', 'eth-go', 'go-ethereum'],
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running brew',
            descriptionDone = 'brewed',
            command = ['brew', 'install', 'eth-go.rb', 'go-ethereum.rb', '--HEAD', '-v'],
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'update serpent-go version',
            command = Interpolate('sed -i "" "s/.*  version \'\(.*\)\'/  version \'%(prop:version)s-%(prop:protocol)s\'/" serpent-go.rb'),
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'update eth-go version',
            command = Interpolate('sed -i "" "s/.*  version \'\(.*\)\'/  version \'%(prop:version)s-%(prop:protocol)s\'/" eth-go.rb'),
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'update go-ethereum version',
            command = Interpolate('sed -i "" "s/.*  version \'\(.*\)\'/  version \'%(prop:version)s-%(prop:protocol)s\'/" go-ethereum.rb'),
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'git add serpent-go',
            command = 'git add serpent-go.rb',
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'git add eth-go',
            command = 'git add eth-go.rb',
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            descriptionDone = 'git add go-ethereum',
            command = 'git add go-ethereum.rb',
            workdir = 'brew',
        ),
        ShellCommand(
            logEnviron = False,
            descriptionDone = 'git commit',
            command = Interpolate('git commit -m "bump eth-go and go-ethereum to %(prop:version)s-%(prop:protocol)s"'),
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            doStepIf = _no_failures,
            descriptionDone = 'git push',
            command = 'git push',
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS}
        ),
    ]: factory.addStep(step)
    return factory


#
# Builders
#
from buildbot.config import BuilderConfig

c['builders'] = []

# Self-update builders
for builder in [
    BuilderConfig(
        name="buildbot",
        builddir="build-self",
        slavenames=["selfslave"],
        factory=self_update_factory(),
        locks=[self_lock.access('exclusive')]),
    BuilderConfig(
        name="buildslave",
        builddir="build-base-dockers",
        slavenames=["selfslave"],
        factory=base_docker_factory(),
        locks=[self_lock.access('exclusive')])
]: c['builders'].append(builder)

for branch in ['master', 'develop']:
    for builder in [
        BuilderConfig(
            name="Linux C++ %s branch" % branch,
            builddir="build-cpp-ethereum-%s-docker" % branch,
            slavenames=["dockerslave"],
            factory=cpp_ethereum_factory(branch=branch),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="Linux Go %s branch" % branch,
            builddir="build-go-ethereum-%s-docker" % branch,
            slavenames=["selfslave", "slave"],
            factory=go_ethereum_factory(branch=branch),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="Windows C++ %s branch" % branch,
            builddir="build-cpp-ethereum-%s-win" % branch,
            slavenames=["winslave"],
            factory=win_cpp_factory(branch=branch),
            locks=[win_lock.access('exclusive')])
    ]: c['builders'].append(builder)


for builder in [
    BuilderConfig(
        name="Linux EthereumJ",
        builddir="build-ethereumj-docker",
        slavenames=["selfslave", "slave"],
        factory=ethereumj_factory(),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="Linux PyEthereum",
        builddir="build-pyethereum-docker",
        slavenames=["selfslave", "slave"],
        factory=pyethereum_factory(),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="Linux Serpent",
        builddir="build-serpent-docker",
        slavenames=["selfslave", "slave"],
        factory=serpent_factory(),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="OSX C++ develop branch",
        builddir="build-cpp-osx",
        slavenames=["osxvps"],
        factory=osx_cpp_factory(),
        locks=[osx_lock.access('counting')]),
    BuilderConfig(
        name="OSX C++ develop brew",
        builddir="build-cpp-osx-brew",
        slavenames=["osxvps"],
        factory=brew_cpp_factory(),
        locks=[osx_lock.access('counting')]),
    BuilderConfig(
        name="OSX Go develop brew",
        builddir="build-go-ethereum-brew",
        slavenames=["osxvps", "osxslave"],
        factory=brew_go_factory(),
        locks=[osx_lock.access('counting')])
]: c['builders'].append(builder)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

# Load users from external file, see users.json.sample
users = []
for user in json.load(open("users.json")):
    users.append((user['username'], user['password']))

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(users),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)

from buildstatusimage import BuildStatusImageResource

class WebStatus(html.WebStatus):
    def setupUsualPages(self, numbuilds, num_events, num_events_max):
        html.WebStatus.setupUsualPages(self, numbuilds, num_events, num_events_max)
        self.putChild("buildstatusimage", BuildStatusImageResource())

c['status'].append(WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words

ircbot = json.load(open("ircbot.json"))
c['status'].append(words.IRC(host=ircbot['server'],
                             nick=ircbot['nickname'],
                             password=ircbot['password'],
                             channels=ircbot['channels'],
                             notify_events={
                                'successToException': 1,
                                'successToFailure': 1,
                                'failureToSuccess': 1,
                                'exceptionToSuccess': 1}))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Ethereum"
c['titleURL'] = "https://ethereum.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://build.ethdev.com/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
