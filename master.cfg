# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

import json
def load_json(json_file):
    with open(json_file) as f:    
        return json.load(f)

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

# Load slaves from external file, see slaves.json.sample
c['slaves'] = []
for slave in load_json("slaves.json"):
    c['slaves'].append(BuildSlave(str(slave['name']), str(slave['password'])))

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://github.com/Cpt-Obvious/ethereum-dockers.git',
        pollAtLaunch=True,
        pollinterval=300,
        ))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/cpp-ethereum.git',
        branch='develop',
        pollinterval=300))

all_repositories = {
    r'https://github.com/Cpt-Obvious/ethereum-dockers.git': 'ethereum-dockers',
    r'https://github.com/ethereum/cpp-ethereum.git': 'cpp-ethereum',
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'build-docker' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []

codebases={'ethereum-dockers': {'repository': 'https://github.com/Cpt-Obvious/ethereum-dockers.git', 'branch': 'master', 'revision': None},
           'cpp-ethereum': {'repository': 'https://github.com/ethereum/cpp-ethereum.git', 'branch': 'develop', 'revision': None}}

c['schedulers'].append(SingleBranchScheduler(
                            name="dockers",
                            change_filter=filter.ChangeFilter(branch='master'),
                            codebases=codebases,
                            builderNames=["build-docker"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='develop'),
                            codebases=codebases,
                            treeStableTimer=300,
                            builderNames=["build-docker"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["build-docker"],
                            codebases=["ethereum-dockers", "cpp-ethereum"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='https://github.com/ethereum/cpp-ethereum.git', branch='develop', mode='incremental', codebase='cpp-ethereum', workdir='cpp-ethereum'))
factory.addStep(Git(repourl='https://github.com/Cpt-Obvious/ethereum-dockers.git', mode='incremental', codebase='ethereum-dockers', workdir='ethereum-dockers'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(ShellCommand(command=["docker", "build", "-t", "cpp-ethereum-base", "cpp-ethereum-base"], workdir='ethereum-dockers'))
factory.addStep(ShellCommand(command=["docker", "build", "--no-cache", "-t", "cpp-ethereum-headless", "cpp-ethereum-headless"], workdir='ethereum-dockers'))
factory.addStep(ShellCommand(command=["docker", "run", "--rm", "cpp-ethereum-headless", "eth", "-V"], workdir='ethereum-dockers'))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="build-docker",
      slavenames=["slave"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

# Load users from external file, see users.json.sample
users = []
for user in load_json("users.json"):
    users.append((str(user['username']), str(user['password'])))

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(users),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

#from buildbot.status import words
#c['status'].append(words.IRC(host="irc.freenode.org",
#                             nick="cpt-obvious",
#                             channels=["#cpt-obvious"],
#                             notify_events={
#                                'exception': 1,
#                                'successToFailure': 1,
#                                'failureToSuccess': 1}))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Captain Obvious"
c['titleURL'] = "https://github.com/Cpt-Obvious/ethereum-dockers"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
