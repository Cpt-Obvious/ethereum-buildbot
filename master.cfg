# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# using simplejson instead of json since Twisted wants ascii instead of unicode
import simplejson as json

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

# Load slaves from external file, see slaves.json.sample
c['slaves'] = []
for slave in json.load(open("slaves.json")):
    c['slaves'].append(BuildSlave(slave['name'], slave['password']))

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/cpp-ethereum.git',
        branches=['master', 'develop'],
        project='cpp-ethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/go-ethereum.git',
        branches=['master', 'develop'],
        project='go-ethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/eth-go.git',
        branches=['master', 'develop'],
        project='go-ethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/ethereumj.git',
        branch='master',
        project='ethereumj',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/pyethereum.git',
        branch='master',
        project='pyethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/serpent.git',
        branch='master',
        project='serpent',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/caktux/homebrew-ethereum.git',
        branch='master',
        project='brew',
        pollinterval=300))

all_repositories = {
    r'https://github.com/Cpt-Obvious/ethereum-dockers.git': 'ethereum-dockers',
    r'https://github.com/ethereum/cpp-ethereum.git': 'cpp-ethereum',
    r'https://github.com/ethereum/go-ethereum.git': 'go-ethereum',
    r'https://github.com/ethereum/eth-go.git': 'eth-go',
    r'https://github.com/ethereum/ethereumj.git': 'ethereumj',
    r'https://github.com/ethereum/pyethereum.git': 'pyethereum',
    r'https://github.com/ethereum/serpent.git': 'serpent',
    r'https://github.com/caktux/homebrew-ethereum.git': 'brew'
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'docker' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.changes import filter
c['schedulers'] = []

dockers_codebases={'ethereum-dockers': {'repository': 'https://github.com/Cpt-Obvious/ethereum-dockers.git', 'branch': 'master', 'revision': None}}
cpp_ethereum_codebases={'cpp-ethereum': {'repository': 'https://github.com/ethereum/cpp-ethereum.git', 'branch': None, 'revision': None}}
go_ethereum_codebases={'go-ethereum': {'repository': 'https://github.com/ethereum/go-ethereum.git', 'branch': None, 'revision': None},
           'eth-go': {'repository': 'https://github.com/ethereum/eth-go.git', 'branch': None, 'revision': None}}
ethereumj_codebases={'ethereumj': {'repository': 'https://github.com/ethereum/ethereumj.git', 'branch': 'master', 'revision': None}}
pyethereum_codebases={'pyethereum': {'repository': 'https://github.com/ethereum/pyethereum.git', 'branch': 'master', 'revision': None}}
serpent_codebases={'serpent': {'repository': 'https://github.com/ethereum/serpent.git', 'branch': 'master', 'revision': None}}
brew_codebases={'brew': {'repository': 'https://github.com/caktux/homebrew-ethereum.git', 'branch': 'master', 'revision': None}}

all_cpp_ethereum_codebases=dockers_codebases.copy()
all_cpp_ethereum_codebases.update(cpp_ethereum_codebases)
all_cpp_ethereum_codebases.update(brew_codebases)

all_go_ethereum_codebases=dockers_codebases.copy()
all_go_ethereum_codebases.update(go_ethereum_codebases)
all_go_ethereum_codebases.update(brew_codebases)

all_ethereumj_codebases=dockers_codebases.copy()
all_ethereumj_codebases.update(ethereumj_codebases)

all_pyethereum_codebases=dockers_codebases.copy()
all_pyethereum_codebases.update(pyethereum_codebases)

all_serpent_codebases=dockers_codebases.copy()
all_serpent_codebases.update(serpent_codebases)

all_brew_cpp_codebases=cpp_ethereum_codebases.copy()
all_brew_cpp_codebases.update(brew_codebases)

all_brew_go_codebases=go_ethereum_codebases.copy()
all_brew_go_codebases.update(brew_codebases)

c['schedulers'].append(SingleBranchScheduler(
                            name="cpp-ethereum-master-git",
                            change_filter=filter.ChangeFilter(project='cpp-ethereum', branch='master'),
                            codebases=all_cpp_ethereum_codebases,
                            treeStableTimer=300,
                            builderNames=["cpp-ethereum-master-docker", "cpp-ethereum-master-win"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="cpp-ethereum-develop-git",
                            change_filter=filter.ChangeFilter(project='cpp-ethereum', branch='develop'),
                            codebases=all_cpp_ethereum_codebases,
                            treeStableTimer=300,
                            builderNames=["cpp-ethereum-develop-docker", "cpp-ethereum-osx", "cpp-ethereum-osx-brew", "cpp-ethereum-develop-win"]))

for branch in ['master', 'develop']:
    c['schedulers'].append(SingleBranchScheduler(
                                name="go-ethereum-%s-git" % branch,
                                change_filter=filter.ChangeFilter(project='go-ethereum', branch=branch),
                                codebases=all_go_ethereum_codebases,
                                treeStableTimer=300,
                                builderNames=["go-ethereum-%s-docker" % branch]))
    c['schedulers'].append(SingleBranchScheduler(
                                name="eth-go-%s-git" % branch,
                                change_filter=filter.ChangeFilter(project='eth-go', branch=branch),
                                codebases=all_go_ethereum_codebases,
                                treeStableTimer=300,
                                builderNames=["go-ethereum-%s-docker" % branch]))
c['schedulers'].append(SingleBranchScheduler(
                            name="go-ethereum-brew-git",
                            change_filter=filter.ChangeFilter(project='go-ethereum', branch='develop'),
                            codebases=all_go_ethereum_codebases,
                            treeStableTimer=300,
                            builderNames=["go-ethereum-osx-brew"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="eth-go-brew-git",
                            change_filter=filter.ChangeFilter(project='eth-go', branch='develop'),
                            codebases=all_go_ethereum_codebases,
                            treeStableTimer=300,
                            builderNames=["go-ethereum-osx-brew"]))

c['schedulers'].append(SingleBranchScheduler(
                            name="ethereumj-git",
                            change_filter=filter.ChangeFilter(project='ethereumj', branch='master'),
                            codebases=all_ethereumj_codebases,
                            treeStableTimer=300,
                            builderNames=["ethereumj-docker"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="pyethereum-git",
                            change_filter=filter.ChangeFilter(project='pyethereum', branch='master'),
                            codebases=all_pyethereum_codebases,
                            treeStableTimer=300,
                            builderNames=["pyethereum-docker"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="serpent-git",
                            change_filter=filter.ChangeFilter(project='serpent', branch='master'),
                            codebases=all_serpent_codebases,
                            treeStableTimer=300,
                            builderNames=["serpent-docker"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="brew-cpp-git",
                            change_filter=filter.ChangeFilter(project='brew', branch='master'),
                            codebases=all_brew_cpp_codebases,
                            treeStableTimer=300,
                            builderNames=["cpp-ethereum-osx-brew"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="brew-go-git",
                            change_filter=filter.ChangeFilter(project='brew', branch='master'),
                            codebases=all_brew_go_codebases,
                            treeStableTimer=300,
                            builderNames=["go-ethereum-osx-brew"]))

for branch in ['master', 'develop']:
    c['schedulers'].append(ForceScheduler(
                                name="force-cpp-ethereum-%s" % branch,
                                builderNames=["cpp-ethereum-%s-docker" % branch],
                                codebases=["ethereum-dockers", "cpp-ethereum"]))
    c['schedulers'].append(ForceScheduler(
                                name="force-go-ethereum-%s" % branch,
                                builderNames=["go-ethereum-%s-docker" % branch],
                                codebases=["ethereum-dockers", "go-ethereum", "eth-go"]))
    c['schedulers'].append(ForceScheduler(
                                name="force-cpp-ethereum-%s-win" % branch,
                                builderNames=["cpp-ethereum-%s-win" % branch]))

c['schedulers'].append(ForceScheduler(
                            name="force-ethereumj",
                            builderNames=["ethereumj-docker"],
                            codebases=["ethereum-dockers", "ethereumj"]))
c['schedulers'].append(ForceScheduler(
                            name="force-pyethereum",
                            builderNames=["pyethereum-docker"],
                            codebases=["ethereum-dockers", "pyethereum"]))
c['schedulers'].append(ForceScheduler(
                            name="force-serpent",
                            builderNames=["serpent-docker"],
                            codebases=["ethereum-dockers", "serpent"]))
c['schedulers'].append(ForceScheduler(
                            name="force-base-dockers",
                            builderNames=["base-dockers"],
                            codebases=["ethereum-dockers"]))
c['schedulers'].append(ForceScheduler(
                            name="force-cpp-ethereum-osx",
                            builderNames=["cpp-ethereum-osx"],
                            codebases=["cpp-ethereum"]))
c['schedulers'].append(ForceScheduler(
                            name="force-cpp-ethereum-brew",
                            builderNames=["cpp-ethereum-osx-brew"],
                            codebases=["brew", "cpp-ethereum"]))
c['schedulers'].append(ForceScheduler(
                            name="force-go-ethereum-brew",
                            builderNames=["go-ethereum-osx-brew"],
                            codebases=["brew", "go-ethereum", "eth-go"]))

c['schedulers'].append(Nightly(
                            name="nightly-dockers",
                            builderNames=["base-dockers"],
                            codebases=dockers_codebases,
                            branch=None,
                            hour=3,
                            minute=0))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process import properties
from buildbot.process.properties import Interpolate
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload
from buildbot.steps import shell
from buildbot.status.results import SUCCESS, WARNINGS # FAILURE, SKIPPED, EXCEPTION, RETRY

def cmd(factory, **kwargs):
    factory.addStep(ShellCommand(
        haltOnFailure = True,
        logEnviron = False,
        **kwargs
    ))

s_git_checkout_dockers = Git(repourl='https://github.com/Cpt-Obvious/ethereum-dockers.git', mode='incremental', codebase='ethereum-dockers')

base_dockers_factory = BuildFactory()
base_dockers_factory.addStep(s_git_checkout_dockers)
cmd(base_dockers_factory, name="cleanup old dockers", command=["./bin/docker-cleanup"])
cmd(base_dockers_factory, name="build the cpp-ethereum-base docker image", command=["docker", "build", "--no-cache", "-t", "cptobvious/cpp-ethereum-base", "cpp-ethereum-base"])

def cpp_ethereum_factory(branch='master'):
    factory = BuildFactory()
    factory.addStep(Git(repourl='https://github.com/ethereum/cpp-ethereum.git', branch=branch, mode='incremental', codebase='cpp-ethereum', workdir='cpp-ethereum-' + branch))
    factory.addStep(s_git_checkout_dockers)
    cmd(factory, name="build the cpp-ethereum-base docker image", command=["docker", "build", "-t", "cptobvious/cpp-ethereum-base", "cpp-ethereum-base"])
    cmd(factory, name="build the cpp-ethereum-%s docker image" % branch, command=["docker", "build", "--no-cache", "-t", "cptobvious/cpp-ethereum-" + branch, "cpp-ethereum-" + branch])
    cmd(factory, name="test with eth version", command=["docker", "run", "--rm", "cptobvious/cpp-ethereum-" + branch, "eth", "-V"])
    cmd(factory, name="pushing the cpp-ethereum-%s docker image" % branch, command=["docker", "push", "cptobvious/cpp-ethereum-%s" % branch], warnOnFailure=True, decodeRC={0:SUCCESS, 1:WARNINGS})
    return factory

def go_ethereum_factory(branch='master'):
    factory = BuildFactory()
    factory.addStep(Git(repourl='https://github.com/ethereum/go-ethereum.git', branch=branch, mode='incremental', codebase='go-ethereum', workdir='go-ethereum-' + branch))
    factory.addStep(Git(repourl='https://github.com/ethereum/eth-go.git', branch=branch, mode='incremental', codebase='eth-go', workdir='eth-go-' + branch))
    factory.addStep(s_git_checkout_dockers)
    cmd(factory, name="build the go-ethereum-base docker image", command=["docker", "build", "-t", "cptobvious/go-ethereum-base", "go-ethereum-base"])
    cmd(factory, name="build the go-ethereum-%s docker image" % branch, command=["docker", "build", "--no-cache", "-t", "cptobvious/go-ethereum-" + branch, "go-ethereum-" + branch])
    cmd(factory, name="pushing the go-ethereum-%s docker image" % branch, command=["docker", "push", "cptobvious/go-ethereum-%s" % branch], warnOnFailure=True, decodeRC={0:SUCCESS, 1:WARNINGS})
    return factory

ethereumj_factory = BuildFactory()
ethereumj_factory.addStep(Git(repourl='https://github.com/ethereum/ethereumj.git', branch='master', mode='incremental', codebase='ethereumj', workdir='ethereumj'))
ethereumj_factory.addStep(s_git_checkout_dockers)
cmd(ethereumj_factory, name="build the ethereumj-base docker image", command=["docker", "build", "-t", "cptobvious/ethereumj-base", "ethereumj-base"])
cmd(ethereumj_factory, name="build the ethereumj-master docker image", command=["docker", "build", "--no-cache", "-t", "cptobvious/ethereumj-package", "ethereumj-package"])

pyethereum_factory = BuildFactory()
pyethereum_factory.addStep(Git(repourl='https://github.com/ethereum/pyethereum.git', branch='master', mode='incremental', codebase='pyethereum', workdir='pyethereum'))
pyethereum_factory.addStep(s_git_checkout_dockers)
cmd(pyethereum_factory, name="build the pyethereum-base docker image", command=["docker", "build", "-t", "cptobvious/pyethereum-base", "pyethereum-base"])
cmd(pyethereum_factory, name="build the pyethereum-master image", command=["docker", "build", "--no-cache", "-t", "cptobvious/pyethereum-master", "pyethereum-master"])
cmd(pyethereum_factory, name="test with pyeth version", command=["docker", "run", "--rm", "cptobvious/pyethereum-master", "bin/pyeth", "-v"])
cmd(pyethereum_factory, name="test with behave", command=["docker", "run", "--rm", "cptobvious/pyethereum-master", "bin/behave"])
cmd(pyethereum_factory, name="test with py.test", command=["docker", "run", "--rm", "cptobvious/pyethereum-master", "bin/py.test"])

serpent_factory = BuildFactory()
serpent_factory.addStep(Git(repourl='https://github.com/ethereum/serpent.git', branch='master', mode='incremental', codebase='serpent', workdir='serpent'))
serpent_factory.addStep(s_git_checkout_dockers)
cmd(serpent_factory, name="build the serpent-master docker image", command=["docker", "build", "--no-cache", "-t", "cptobvious/serpent-master", "serpent-master"])
cmd(serpent_factory, name="test with namecoin compilation", command=["docker", "run", "--rm", "cptobvious/serpent-master", "serpent", "compile", "/serpent/examples/namecoin.se"])

def win_cpp_factory(branch='master'):
    # both branches use a shared workdir
    workdir = "../build-cpp-win/build"

    factory = BuildFactory()
    # cmd(factory, name="run windows bootstrap.sh", command=[r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'bootstrap.sh'], workdir=workdir)
    cmd(factory, description="clean", command=["clean.bat"], workdir=workdir)
    cmd(factory, description="checkout", command=["checkout_%s.bat" % branch], workdir=workdir)
    cmd(factory, description="build", command=["compile_ethereum.bat"], workdir=workdir + "/cpp-ethereum/windows")
    # cmd(factory, description="pack", command=[r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'make_zips.sh'], workdir=workdir)
    factory.addStep(shell.SetPropertyFromCommand(
        command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'git --git-dir=./cpp-ethereum/.git --work-tree=../cpp-ethereum rev-parse HEAD | cut -c1-6'],
        property = "githash",
        workdir = workdir,
    ))
    factory.addStep(shell.SetPropertyFromCommand(
        command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', '--login', '-c', 'date +%Y%m%d%H%M%S'],
        property = "timestamp",
        workdir = workdir,
    ))
    factory.addStep(shell.SetPropertyFromCommand(
       command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'grep "EthVersion" ./cpp-ethereum/libethential/Common.cpp | sed "s/.*\"\(.*\)\".*/\1/"'],
       property = "version",
       workdir = workdir,
    ))
    factory.addStep(ShellCommand(haltOnFailure = True, logEnviron = False, description = 'pack',
                            descriptionDone= 'packed', command = ['7z', 'a', 'cpp-ethereum.7z', '.\_binaries\*'],
                            workdir = workdir))
    factory.addStep(FileUpload(
            name = 'upload', 
            workdir = workdir, 
            slavesrc="cpp-ethereum.7z", 
            masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/cpp-ethereum-vs2013-%(prop:version)s-%(prop:timestamp)s-%(prop:githash)s.7z"), url = Interpolate("/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/cpp-ethereum-vs2013-%(prop:version)s-%(prop:timestamp)s-%(prop:githash)s.7z")))

    return factory

osx_cpp_factory = BuildFactory()
for step in [
        Git(
            repourl = 'https://github.com/ethereum/cpp-ethereum.git',
            branch = 'develop',
            mode = 'full',
            method = 'copy',
            codebase = 'cpp-ethereum',
            workdir = 'osx-cpp-ethereum'
        ),
        shell.SetPropertyFromCommand(
            command = 'sed -ne "s/.*c_databaseVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "database",
            workdir = 'osx-cpp-ethereum',
        ),
        shell.SetPropertyFromCommand(
            command='sed -ne "s/.*c_protocolVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property="protocol",
            workdir = 'osx-cpp-ethereum',
        ),
        shell.SetPropertyFromCommand(
            command='sed -ne "s/.*Version = \\"\(.*\)\\";/\\1/p" libdevcore/Common.cpp',
            property="version",
            workdir = 'osx-cpp-ethereum',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running cmake',
            descriptionDone= 'cmake',
            command = ['cmake', '.'],
            workdir = 'osx-cpp-ethereum'
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running make',
            descriptionDone= 'make',
            command = ['make', '-j6'],
            workdir = 'osx-cpp-ethereum'
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'zip AlethZero.app',
            descriptionDone= 'zipped AlethZero.app',
            command = ['zip', '-r', '-y', 'alethzero/AlethZero.zip', 'alethzero/AlethZero.app'],
            workdir = 'osx-cpp-ethereum'
        ),
        FileUpload(
            name = 'Upload AlethZero',
            workdir = 'osx-cpp-ethereum',
            slavesrc="alethzero/AlethZero.zip",
            masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/AlethZero-%(prop:version)s-%(prop:protocol)s-%(prop:database)s.zip"),
            url = Interpolate("/builds/%(prop:buildername)s/%(prop:buildnumber)s/app/AlethZero-%(prop:version)s-%(prop:protocol)s-%(prop:database)s.zip"),
        ),
    ]: osx_cpp_factory.addStep(step)

@properties.renderer
def get_cpp_revision(props):
    if props.has_key('got_revision'):
        return props['got_revision']['cpp-ethereum']
    return None

brew_cpp_factory = BuildFactory()
for step in [
        Git(
            repourl = 'https://github.com/ethereum/cpp-ethereum.git',
            branch = 'develop',
            mode = 'incremental',
            codebase = 'cpp-ethereum',
            workdir = 'brew-cpp-ethereum'
        ),
        Git(
            repourl = 'https://github.com/caktux/homebrew-ethereum.git',
            branch = 'master',
            mode = 'incremental',
            codebase = 'brew',
            workdir = 'brew',
        ),
        shell.SetPropertyFromCommand(
            command = 'sed -ne "s/.*c_databaseVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "database",
            workdir = 'brew-cpp-ethereum',
        ),
        shell.SetPropertyFromCommand(
            command = 'sed -ne "s/.*c_protocolVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "protocol",
            workdir = 'brew-cpp-ethereum',
        ),
        shell.SetPropertyFromCommand(
            command = 'sed -ne "s/.*Version = \\"\(.*\)\\";/\\1/p" libdevcore/Common.cpp',
            property = "version",
            workdir = 'brew-cpp-ethereum',
        ),
        ShellCommand(
            descriptionDone = 'update version',
            command = Interpolate('sed -i "" "s/    version \'\(.*\)\'/    version \'%(prop:version)s-%(prop:protocol)s-%(prop:database)s\'/" ethereum.rb'),
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'git add',
            command = 'git add ethereum.rb',
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'git commit',
            command = Interpolate('git commit -m "bump to %(prop:version)s-%(prop:protocol)s-%(prop:database)s"'),
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        ShellCommand(
            descriptionDone = 'git push',
            command = 'git push',
            workdir = 'brew',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'cleanup',
            descriptionDone = 'clean',
            command = ['brew', 'remove', 'ethereum'],
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running brew',
            descriptionDone = 'brewed',
            command = ['brew', 'install', 'ethereum.rb', '--devel', '-v'],
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'update stable version',
            command = Interpolate('sed -i "" "s/      version \'\(.*\)\'/      version \'%(prop:version)s-%(prop:protocol)s-%(prop:database)s\'/" ethereum.rb'),
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'update stable revision',
            command = Interpolate('sed -i "" "s/:revision => \'\(.*\)\'/:revision => \'%(kw:cpp_revision)s\'/" ethereum.rb', cpp_revision=get_cpp_revision),
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'git add',
            command = 'git add ethereum.rb',
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'git commit',
            command = Interpolate('git commit -m "bump stable to %(prop:version)s-%(prop:protocol)s-%(prop:database)s at %(kw:cpp_revision)s"', cpp_revision=get_cpp_revision),
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        ShellCommand(
            descriptionDone = 'git push',
            command = 'git push',
            workdir = 'brew',
        ),
    ]: brew_cpp_factory.addStep(step)


brew_go_factory = BuildFactory()
for step in [
        Git(
            repourl = 'https://github.com/ethereum/eth-go.git',
            branch = 'develop',
            mode = 'incremental',
            codebase = 'eth-go',
            workdir = 'brew-eth-go'
        ),
        Git(
            repourl = 'https://github.com/ethereum/go-ethereum.git',
            branch = 'develop',
            mode = 'incremental',
            codebase = 'go-ethereum',
            workdir = 'brew-go-ethereum'
        ),
        Git(
            repourl = 'https://github.com/caktux/homebrew-ethereum.git',
            branch = 'master',
            mode = 'incremental',
            codebase = 'brew',
            workdir = 'brew',
        ),
        shell.SetPropertyFromCommand(
            command = 'sed -ne "s/.*ProtocolVersion = \(.*\)/\\1/p" peer.go',
            property = "protocol",
            workdir = 'brew-eth-go',
        ),
        shell.SetPropertyFromCommand(
            command = 'sed -ne "s/.*Version.*= \\"\(.*\)\\"/\\1/p" ethereum/main.go',
            property = "version",
            workdir = 'brew-go-ethereum',
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running brew',
            descriptionDone = 'brewed',
            command = ['brew', 'reinstall', 'eth-go.rb', 'go-ethereum.rb', '--HEAD', '-v'],
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'update serpent-go version',
            command = Interpolate('sed -i "" "s/.*  version \'\(.*\)\'/  version \'%(prop:version)s-%(prop:protocol)s\'/" serpent-go.rb'),
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'update eth-go version',
            command = Interpolate('sed -i "" "s/.*  version \'\(.*\)\'/  version \'%(prop:version)s-%(prop:protocol)s\'/" eth-go.rb'),
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'update go-ethereum version',
            command = Interpolate('sed -i "" "s/.*  version \'\(.*\)\'/  version \'%(prop:version)s-%(prop:protocol)s\'/" go-ethereum.rb'),
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'git add eth-go',
            command = 'git add eth-go.rb',
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'git add go-ethereum',
            command = 'git add go-ethereum.rb',
            workdir = 'brew',
        ),
        ShellCommand(
            descriptionDone = 'git commit',
            command = Interpolate('git commit -m "bump eth-go and go-ethereum to %(prop:version)s-%(prop:protocol)s"'),
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        ShellCommand(
            descriptionDone = 'git push',
            command = 'git push',
            workdir = 'brew',
        ),
    ]: brew_go_factory.addStep(step)

from buildbot import locks

build_lock = locks.SlaveLock("slave_builds", maxCount = 2)
osx_lock = locks.SlaveLock("osx_builds", maxCount = 1)
win_lock = locks.SlaveLock("win_builds", maxCount = 1)

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="base-dockers",
      builddir="build-base-dockers",
      slavenames=["slave"],
      factory=base_dockers_factory,
      locks=[build_lock.access('counting')]))
for branch in ['master', 'develop']:
    c['builders'].append(
        BuilderConfig(name="cpp-ethereum-%s-docker" % branch,
          builddir="build-cpp-ethereum-%s-docker" % branch,
          slavenames=["slave"],
          factory=cpp_ethereum_factory(branch=branch),
          locks=[build_lock.access('counting')]))
    c['builders'].append(
        BuilderConfig(name="go-ethereum-%s-docker" % branch,
          builddir="build-go-ethereum-%s-docker" % branch,
          slavenames=["slave"],
          factory=go_ethereum_factory(branch=branch),
          locks=[build_lock.access('counting')]))
    c['builders'].append(
        BuilderConfig(name="cpp-ethereum-%s-win" % branch,
          builddir="build-cpp-ethereum-%s-win" % branch,
          slavenames=["winslave"],
          factory=win_cpp_factory(branch=branch),
          locks=[win_lock.access('exclusive')]))

c['builders'].append(
    BuilderConfig(name="ethereumj-docker",
      builddir="build-ethereumj-docker",
      slavenames=["slave"],
      factory=ethereumj_factory,
      locks=[build_lock.access('counting')]))
c['builders'].append(
    BuilderConfig(name="pyethereum-docker",
      builddir="build-pyethereum-docker",
      slavenames=["slave"],
      factory=pyethereum_factory,
      locks=[build_lock.access('counting')]))
c['builders'].append(
    BuilderConfig(name="serpent-docker",
      builddir="build-serpent-docker",
      slavenames=["slave"],
      factory=serpent_factory,
      locks=[build_lock.access('counting')]))

c['builders'].append(
    BuilderConfig(name="cpp-ethereum-osx",
      builddir="build-cpp-osx",
      slavenames=["osxslave"],
      factory=osx_cpp_factory,
      locks=[osx_lock.access('exclusive')]))
c['builders'].append(
    BuilderConfig(name="cpp-ethereum-osx-brew",
      builddir="build-cpp-osx-brew",
      slavenames=["osxslave"],
      factory=brew_cpp_factory,
      locks=[osx_lock.access('exclusive')]))
c['builders'].append(
    BuilderConfig(name="go-ethereum-osx-brew",
      builddir="build-go-ethereum-brew",
      slavenames=["osxslave"],
      factory=brew_go_factory,
      locks=[osx_lock.access('exclusive')]))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

# Load users from external file, see users.json.sample
users = []
for user in json.load(open("users.json")):
    users.append((user['username'], user['password']))

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(users),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)

from buildstatusimage import BuildStatusImageResource

class WebStatus(html.WebStatus):
    def setupUsualPages(self, numbuilds, num_events, num_events_max):
        html.WebStatus.setupUsualPages(self, numbuilds, num_events, num_events_max)
        self.putChild("buildstatusimage", BuildStatusImageResource())

c['status'].append(WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words

ircbot = json.load(open("ircbot.json"))
c['status'].append(words.IRC(host=ircbot['server'],
                             nick=ircbot['nickname'],
                             password=ircbot['password'],
                             channels=ircbot['channels'],
                             notify_events={
                                'exception': 1,
                                'successToFailure': 1,
                                'failureToSuccess': 1,
                                'exceptionToSuccess': 1}))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Captain Obvious"
c['titleURL'] = "https://github.com/Cpt-Obvious/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://cpt-obvious.ethercasts.com:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
