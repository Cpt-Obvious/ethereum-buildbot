# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

import ast
# using ast.literal_eval instead of json.load since Twisted wants ascii instead of unicode
def load_json(json_file):
    with open(json_file) as f:    
        return ast.literal_eval(f.read())

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

# Load slaves from external file, see slaves.json.sample
c['slaves'] = []
for slave in load_json("slaves.json"):
    c['slaves'].append(BuildSlave(slave['name'], slave['password']))

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://github.com/Cpt-Obvious/ethereum-dockers.git',
        project='ethereum-dockers',
        pollAtLaunch=True,
        pollinterval=300,
        ))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/cpp-ethereum.git',
        branch='develop',
        project='cpp-ethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/go-ethereum.git',
        branch='master',
        project='go-ethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/eth-go.git',
        branch='master',
        project='go-ethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/obscuren/serpent-go.git',
        branch='master',
        project='go-ethereum',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/ethereumj.git',
        branch='master',
        project='ethereumj',
        pollinterval=300))
c['change_source'].append(GitPoller(
        'https://github.com/ethereum/pyethereum.git',
        branch='master',
        project='pyethereum',
        pollinterval=300))

all_repositories = {
    r'https://github.com/Cpt-Obvious/ethereum-dockers.git': 'ethereum-dockers',
    r'https://github.com/ethereum/cpp-ethereum.git': 'cpp-ethereum',
    r'https://github.com/ethereum/go-ethereum.git': 'go-ethereum',
    r'https://github.com/ethereum/eth-go.git': 'eth-go',
    r'https://github.com/obscuren/serpent-go.git': 'serpent-go',
    r'https://github.com/ethereum/ethereumj.git': 'ethereumj',
    r'https://github.com/ethereum/pyethereum.git': 'pyethereum',
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'build-docker' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.changes import filter
c['schedulers'] = []

dockers_codebases={'ethereum-dockers': {'repository': 'https://github.com/Cpt-Obvious/ethereum-dockers.git', 'branch': 'master', 'revision': None}}
cpp_codebases={'cpp-ethereum': {'repository': 'https://github.com/ethereum/cpp-ethereum.git', 'branch': 'develop', 'revision': None}}
go_codebases={'go-ethereum': {'repository': 'https://github.com/ethereum/go-ethereum.git', 'branch': 'master', 'revision': None},
           'eth-go': {'repository': 'https://github.com/ethereum/eth-go.git', 'branch': 'master', 'revision': None},
           'serpent-go': {'repository': 'https://github.com/obscuren/serpent-go.git', 'branch': 'master', 'revision': None}}
java_codebases={'ethereumj': {'repository': 'https://github.com/ethereum/ethereumj.git', 'branch': 'master', 'revision': None}}
python_codebases={'pyethereum': {'repository': 'https://github.com/ethereum/pyethereum.git', 'branch': 'master', 'revision': None}}

all_codebases=dockers_codebases.copy()
all_codebases.update(cpp_codebases)
all_codebases.update(go_codebases)
all_codebases.update(java_codebases)
all_codebases.update(python_codebases)

all_cpp_codebases=dockers_codebases.copy()
all_cpp_codebases.update(cpp_codebases)

all_go_codebases=dockers_codebases.copy()
all_go_codebases.update(go_codebases)

all_java_codebases=dockers_codebases.copy()
all_java_codebases.update(java_codebases)

all_python_codebases=dockers_codebases.copy()
all_python_codebases.update(python_codebases)

c['schedulers'].append(SingleBranchScheduler(
                            name="all-dockers",
                            change_filter=filter.ChangeFilter(project='ethereum-dockers'),
                            codebases=all_codebases,
                            builderNames=["build-cpp-docker", "build-go-docker", "build-java-docker", "build-python-docker"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="cpp-docker",
                            change_filter=filter.ChangeFilter(project='cpp-ethereum', branch='develop'),
                            codebases=all_cpp_codebases,
                            treeStableTimer=300,
                            builderNames=["build-cpp-docker"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="go-docker",
                            change_filter=filter.ChangeFilter(project='go-ethereum', branch='master'),
                            codebases=all_go_codebases,
                            treeStableTimer=300,
                            builderNames=["build-go-docker"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="java-docker",
                            change_filter=filter.ChangeFilter(project='ethereumj', branch='master'),
                            codebases=all_java_codebases,
                            treeStableTimer=300,
                            builderNames=["build-java-docker"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="python-docker",
                            change_filter=filter.ChangeFilter(project='pyethereum', branch='master'),
                            codebases=all_python_codebases,
                            treeStableTimer=300,
                            builderNames=["build-python-docker"]))
c['schedulers'].append(ForceScheduler(
                            name="force-cpp",
                            builderNames=["build-cpp-docker"],
                            codebases=["ethereum-dockers", "cpp-ethereum"]))
c['schedulers'].append(ForceScheduler(
                            name="force-go",
                            builderNames=["build-go-docker"],
                            codebases=["ethereum-dockers", "go-ethereum", "eth-go", "serpent-go"]))
c['schedulers'].append(ForceScheduler(
                            name="force-java",
                            builderNames=["build-java-docker"],
                            codebases=["ethereum-dockers", "ethereumj"]))
c['schedulers'].append(ForceScheduler(
                            name="force-python",
                            builderNames=["build-python-docker"],
                            codebases=["ethereum-dockers", "pyethereum"]))
c['schedulers'].append(ForceScheduler(
                            name="force-base-dockers",
                            builderNames=["build-base-dockers"],
                            codebases=["ethereum-dockers"]))
c['schedulers'].append(Nightly(
                            name="nightly-dockers",
                            builderNames=["build-base-dockers"],
                            branch=None,
                            hour=3,
                            minute=0))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

base_dockers_factory = BuildFactory()
# check out the source
base_dockers_factory.addStep(Git(repourl='https://github.com/Cpt-Obvious/ethereum-dockers.git', mode='incremental', workdir='ethereum-dockers'))
# cleanup old dockers
base_dockers_factory.addStep(ShellCommand(command=["./bin/docker-cleanup"], workdir='ethereum-dockers'))
# build the image
base_dockers_factory.addStep(ShellCommand(command=["docker", "build", "--no-cache", "-t", "cpp-ethereum-base", "cpp-ethereum-base"], workdir='ethereum-dockers'))

cpp_factory = BuildFactory()
# check out the source
cpp_factory.addStep(Git(repourl='https://github.com/ethereum/cpp-ethereum.git', branch='develop', mode='incremental', codebase='cpp-ethereum', workdir='cpp-ethereum'))
cpp_factory.addStep(Git(repourl='https://github.com/Cpt-Obvious/ethereum-dockers.git', mode='incremental', codebase='ethereum-dockers', workdir='ethereum-dockers'))
# build the image
cpp_factory.addStep(ShellCommand(command=["docker", "build", "-t", "cpp-ethereum-base", "cpp-ethereum-base"], workdir='ethereum-dockers'))
cpp_factory.addStep(ShellCommand(command=["docker", "build", "--no-cache", "-t", "cpp-ethereum-headless", "cpp-ethereum-headless"], workdir='ethereum-dockers'))
# test execution
cpp_factory.addStep(ShellCommand(command=["docker", "run", "--rm", "cpp-ethereum-headless", "eth", "-V"], workdir='ethereum-dockers'))

go_factory = BuildFactory()
# check out the source
go_factory.addStep(Git(repourl='https://github.com/ethereum/go-ethereum.git', branch='master', mode='incremental', codebase='go-ethereum', workdir='go-ethereum'))
go_factory.addStep(Git(repourl='https://github.com/Cpt-Obvious/ethereum-dockers.git', mode='incremental', codebase='ethereum-dockers', workdir='ethereum-dockers'))
# build the image
go_factory.addStep(ShellCommand(command=["docker", "build", "-t", "go-ethereum-base", "go-ethereum-base"], workdir='ethereum-dockers'))
go_factory.addStep(ShellCommand(command=["docker", "build", "--no-cache", "-t", "go-ethereum-ethereal", "go-ethereum-ethereal"], workdir='ethereum-dockers'))

java_factory = BuildFactory()
# check out the source
java_factory.addStep(Git(repourl='https://github.com/ethereum/ethereumj.git', branch='master', mode='incremental', codebase='ethereumj', workdir='ethereumj'))
java_factory.addStep(Git(repourl='https://github.com/Cpt-Obvious/ethereum-dockers.git', mode='incremental', codebase='ethereum-dockers', workdir='ethereum-dockers'))
# build the image
java_factory.addStep(ShellCommand(command=["docker", "build", "-t", "ethereumj-base", "ethereumj-base"], workdir='ethereum-dockers'))
java_factory.addStep(ShellCommand(command=["docker", "build", "--no-cache", "-t", "ethereumj-package", "ethereumj-package"], workdir='ethereum-dockers'))

python_factory = BuildFactory()
# check out the source
python_factory.addStep(Git(repourl='https://github.com/ethereum/pyethereum.git', branch='master', mode='incremental', codebase='pyethereum', workdir='pyethereum'))
python_factory.addStep(Git(repourl='https://github.com/Cpt-Obvious/ethereum-dockers.git', mode='incremental', codebase='ethereum-dockers', workdir='ethereum-dockers'))
# build the image
python_factory.addStep(ShellCommand(command=["docker", "build", "-t", "pyethereum-base", "pyethereum-base"], workdir='ethereum-dockers'))
python_factory.addStep(ShellCommand(command=["docker", "build", "--no-cache", "-t", "pyethereum-master", "pyethereum-master"], workdir='ethereum-dockers'))
# test execution
python_factory.addStep(ShellCommand(command=["docker", "run", "--rm", "pyethereum-master", "/pyethereum/bin/pyeth", "-v"], workdir='ethereum-dockers'))


from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="build-base-dockers",
      slavenames=["slave"],
      factory=base_dockers_factory))
c['builders'].append(
    BuilderConfig(name="build-cpp-docker",
      slavenames=["slave"],
      factory=cpp_factory))
c['builders'].append(
    BuilderConfig(name="build-go-docker",
      slavenames=["slave"],
      factory=go_factory))
c['builders'].append(
    BuilderConfig(name="build-java-docker",
      slavenames=["slave"],
      factory=java_factory))
c['builders'].append(
    BuilderConfig(name="build-python-docker",
      slavenames=["slave"],
      factory=python_factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

# Load users from external file, see users.json.sample
users = []
for user in load_json("users.json"):
    users.append((user['username'], user['password']))

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(users),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words

ircbot = load_json("ircbot.json")
c['status'].append(words.IRC(host=ircbot['server'],
                             nick=ircbot['nickname'],
                             password=ircbot['password'],
                             channels=ircbot['channels'],
                             notify_events={
                                'exception': 1,
                                'successToFailure': 1,
                                'failureToSuccess': 1}))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Captain Obvious"
c['titleURL'] = "https://github.com/Cpt-Obvious/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://cpt-obvious.ethercasts.com:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
