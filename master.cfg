# -*- python -*-
# ex: set syntax=python:
import re
import time
import urllib

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# using simplejson instead of json since Twisted wants ascii instead of unicode
import simplejson as json

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

# Load slaves from external file, see slaves.json.sample
c['slaves'] = []
for slave in json.load(open("slaves.json")):
    c['slaves'].append(BuildSlave(slave['name'], slave['password']))

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

for poller in [
    GitPoller(
        'https://github.com/ethereum/ethereum-buildbot.git',
        branch='master',
        project='ethereum-buildbot',
        pollinterval=60),
    # GitPoller(
    #     'https://github.com/ethereum/homebrew-ethereum.git',
    #     branch='master',
    #     project='brew',
    #     pollinterval=300),

]: c['change_source'].append(poller)

all_repositories = {
    r'https://github.com/ethereum/ethereum-buildbot.git': 'ethereum-buildbot',
    r'https://github.com/ethereum/ethereum-dockers.git': 'ethereum-dockers',
    r'https://github.com/ethereum/cpp-ethereum.git': 'cpp-ethereum',
    r'http://github.com/ethereum/cpp-ethereum.git': 'cpp-ethereum',
    r'https://github.com/ethereum/go-ethereum.git': 'go-ethereum',
    r'http://github.com/ethereum/go-ethereum.git': 'go-ethereum',
    r'https://github.com/ethereum/go-build.git': 'go-build',
    r'https://github.com/ethereum/ethereumj.git': 'ethereumj',
    r'http://github.com/ethereum/ethereumj.git': 'ethereumj',
    r'https://github.com/ethereum/pyethereum.git': 'pyethereum',
    r'http://github.com/ethereum/pyethereum.git': 'pyethereum',
    r'https://github.com/ethereum/serpent.git': 'serpent',
    r'https://github.com/ethereum/tests.git': 'tests',
    r'https://github.com/ethereum/homebrew-ethereum.git': 'homebrew-ethereum'
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'docker' build

from buildbot.schedulers.basic import AnyBranchScheduler, SingleBranchScheduler
from buildbot.schedulers.forcesched import *
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes import filter
c['schedulers'] = []

self_codebases={
    'ethereum-buildbot': {
        'repository': 'https://github.com/ethereum/ethereum-buildbot.git',
        'branch': 'master',
        'revision': None
    }
}
dockers_codebases={
    'ethereum-dockers': {
        'repository': 'https://github.com/ethereum/ethereum-dockers.git',
        'branch': 'master',
        'revision': None
    }
}
cpp_ethereum_codebases={
    'cpp-ethereum': {
        'repository': 'https://github.com/ethereum/cpp-ethereum.git',
        'branch': None,
        'revision': None
    },
    'tests': {
        'repository': 'https://github.com/ethereum/tests.git',
        'branch': None,
        'revision': None
    }
}
go_ethereum_codebases={
    'go-ethereum': {
        'repository': 'https://github.com/ethereum/go-ethereum.git',
        'branch': None,
        'revision': None
    },
    'go-build': {
        'repository': 'https://github.com/ethereum/go-build.git',
        'branch': None,
        'revision': None
    }
}
ethereumj_codebases={
    'ethereumj': {
        'repository': 'https://github.com/ethereum/ethereumj.git',
        'branch': 'master',
        'revision': None
    }
}
pyethereum_codebases={
    'pyethereum': {
        'repository': 'https://github.com/ethereum/pyethereum.git',
        'branch': None,
        'revision': None
    }
}
serpent_codebases={
    'serpent': {
        'repository': 'https://github.com/ethereum/serpent.git',
        'branch': None,
        'revision': None
    }
}
brew_codebases={
    'homebrew-ethereum': {
        'repository': 'https://github.com/ethereum/homebrew-ethereum.git',
        'branch': 'master',
        'revision': None
    }
}

all_cpp_ethereum_codebases=cpp_ethereum_codebases.copy()
all_cpp_ethereum_codebases.update(brew_codebases)

all_go_ethereum_codebases=go_ethereum_codebases.copy()
all_go_ethereum_codebases.update(brew_codebases)

all_ethereumj_codebases=ethereumj_codebases.copy()

all_pyethereum_codebases=pyethereum_codebases.copy()

all_serpent_codebases=serpent_codebases.copy()

all_brew_cpp_codebases=cpp_ethereum_codebases.copy()
all_brew_cpp_codebases.update(brew_codebases)

all_brew_go_codebases=go_ethereum_codebases.copy()
all_brew_go_codebases.update(brew_codebases)

for scheduler in [
    SingleBranchScheduler(
        name="ethereum-buildbot-git",
        change_filter=filter.ChangeFilter(project='ethereum-buildbot', branch='master'),
        codebases=self_codebases,
        treeStableTimer=60,
        builderNames=["buildbot"]),
]: c['schedulers'].append(scheduler)

for branch in ['master', 'develop']:
    for scheduler in [
        SingleBranchScheduler(
            name="cpp-ethereum-%s-git" % branch,
            change_filter=filter.ChangeFilter(project='cpp-ethereum', branch=branch),
            codebases=all_cpp_ethereum_codebases,
            treeStableTimer=60,
            builderNames=[
                "Linux C++ %s branch" % branch,
                "Linux C++ %s evmjit" % branch,
                "OSX C++ %s branch" % branch,
                "OSX C++ %s evmjit" % branch,
                "Windows C++ %s branch" % branch]),
        SingleBranchScheduler(
            name="go-ethereum-%s-git" % branch,
            change_filter=filter.ChangeFilter(project='go-ethereum', branch=branch),
            codebases=all_go_ethereum_codebases,
            treeStableTimer=60,
            builderNames=[
                "Linux Go %s branch" % branch,
                "OSX Go %s branch" % branch]),
        SingleBranchScheduler(
            name="pyethereum-%s-git" % branch,
            change_filter=filter.ChangeFilter(project='pyethereum', branch=branch),
            codebases=all_pyethereum_codebases,
            treeStableTimer=60,
            builderNames=[
                "Linux PyEthereum %s" % branch,
                "OSX PyEthereum %s" % branch]),
        SingleBranchScheduler(
            name="serpent-%s-git" % branch,
            change_filter=filter.ChangeFilter(project='serpent', branch=branch),
            codebases=all_serpent_codebases,
            treeStableTimer=60,
            builderNames=[
                "Linux Serpent %s" % branch,
                "OSX Serpent %s" % branch]),

        # Brew triggerables
        Triggerable(
            name="cpp-ethereum-%s-brew" % branch,
            builderNames=["OSX C++ %s brew" % branch],
            codebases=all_cpp_ethereum_codebases),
        Triggerable(
            name="go-ethereum-%s-brew" % branch,
            builderNames=["OSX Go %s brew" % branch],
            codebases=all_go_ethereum_codebases),

        # Extra triggerable checks
        Triggerable(
            name="cpp-ethereum-%s-check" % branch,
            builderNames=["Linux C++ %s check" % branch],
            codebases=all_cpp_ethereum_codebases),
        Triggerable(
            name="cpp-ethereum-%s-osx-check" % branch,
            builderNames=["OSX C++ %s check" % branch],
            codebases=all_cpp_ethereum_codebases),

        # PoC node servers
        Triggerable(
            name="cpp-ethereum-%s-server" % branch,
            builderNames=["Linux C++ %s server" % branch],
            codebases=all_cpp_ethereum_codebases)
    ]: c['schedulers'].append(scheduler)

    for architecture in ['i386', 'amd64']:
        for distribution in ['trusty', 'utopic']:
            for scheduler in [
                Triggerable(
                    name="cpp-ethereum-%s-%s-%s" % (branch, architecture, distribution),
                    builderNames=["Linux C++ %s deb %s-%s" % (branch, architecture, distribution)]),
                Triggerable(
                    name="go-ethereum-%s-%s-%s" % (branch, architecture, distribution),
                    builderNames=["Linux Go %s deb %s-%s" % (branch, architecture, distribution)])
            ]: c['schedulers'].append(scheduler)

for scheduler in [
    SingleBranchScheduler(
        name="ethereumj-git",
        change_filter=filter.ChangeFilter(project='ethereumj', branch='master'),
        codebases=all_ethereumj_codebases,
        treeStableTimer=300,
        builderNames=["Linux EthereumJ"]),

    # Brew
    # SingleBranchScheduler(
    #     name="brew-cpp-git",
    #     change_filter=filter.ChangeFilter(project='brew', branch='master'),
    #     codebases=all_brew_cpp_codebases,
    #     treeStableTimer=300,
    #     builderNames=["OSX C++ master brew", "OSX C++ develop brew"]),
    # SingleBranchScheduler(
    #     name="brew-go-git",
    #     change_filter=filter.ChangeFilter(project='brew', branch='master'),
    #     codebases=all_brew_go_codebases,
    #     treeStableTimer=300,
    #     builderNames=["OSX Go master brew", "OSX Go develop brew"]),

    # Pull requests
    AnyBranchScheduler(
        name="cpp-ethereum-develop-pr-git",
        change_filter=filter.ChangeFilter(project='cpp-ethereum', category='pull-request'),
        codebases=all_cpp_ethereum_codebases,
        treeStableTimer=60,
        builderNames=[
            "Linux C++ pull requests",
            "OSX C++ pull requests",
            "Windows C++ pull requests"
        ]),
    AnyBranchScheduler(
        name="go-ethereum-develop-pr-git",
        change_filter=filter.ChangeFilter(project='go-ethereum', category='pull-request'),
        codebases=all_go_ethereum_codebases,
        treeStableTimer=60,
        builderNames=[
            "Linux Go pull requests",
            "OSX Go pull requests"
        ]),
    AnyBranchScheduler(
        name="pyethereum-pr-git",
        change_filter=filter.ChangeFilter(project='pyethereum', category='pull-request'),
        codebases=all_pyethereum_codebases,
        treeStableTimer=60,
        builderNames=[
            "Linux PyEthereum PRs",
            "OSX PyEthereum PRs"
        ]),
    AnyBranchScheduler(
        name="serpent-pr-git",
        change_filter=filter.ChangeFilter(project='serpent', category='pull-request'),
        codebases=all_serpent_codebases,
        treeStableTimer=60,
        builderNames=[
            "Linux Serpent PRs",
            "OSX Serpent PRs"
        ]),
    AnyBranchScheduler(
        name="ethereumj-pr-git",
        change_filter=filter.ChangeFilter(project='ethereumj', category='pull-request'),
        codebases=all_ethereumj_codebases,
        treeStableTimer=300,
        builderNames=[
            "Linux EthereumJ PRs"
        ])

]: c['schedulers'].append(scheduler)


#
# Forced schedulers
#
for scheduler in [
    ForceScheduler(
        name="force-self-update",
        builderNames=["buildbot"],
        codebases=["ethereum-buildbot"])
]: c['schedulers'].append(scheduler)

for buildslave in ["one", "two"]:
    for scheduler in [
        ForceScheduler(
            name="force-buildslave-cpp-%s" % buildslave,
            builderNames=["buildslave-cpp-%s" % buildslave],
            codebases=["ethereum-dockers"]),
        ForceScheduler(
            name="force-buildslave-go-%s" % buildslave,
            builderNames=["buildslave-go-%s" % buildslave],
            codebases=["ethereum-dockers"]),
        ForceScheduler(
            name="force-buildslave-python-%s" % buildslave,
            builderNames=["buildslave-python-%s" % buildslave],
            codebases=["ethereum-dockers"]),
        ForceScheduler(
            name="force-buildslave-java-%s" % buildslave,
            builderNames=["buildslave-java-%s" % buildslave],
            codebases=["ethereum-dockers"])
    ]: c['schedulers'].append(scheduler)

for branch in ['master', 'develop']:
    for scheduler in [
        ForceScheduler(
            name="force-cpp-ethereum-%s" % branch,
            builderNames=["Linux C++ %s branch" % branch],
            codebases=["cpp-ethereum", "tests"]),
        ForceScheduler(
            name="force-cpp-ethereum-%s-evmjit" % branch,
            builderNames=["Linux C++ %s evmjit" % branch],
            codebases=["cpp-ethereum", "tests"]),
        ForceScheduler(
            name="force-go-ethereum-%s" % branch,
            builderNames=["Linux Go %s branch" % branch],
            codebases=["go-ethereum"]),
        ForceScheduler(
            name="force-cpp-ethereum-%s-osx" % branch,
            builderNames=["OSX C++ %s branch" % branch],
            codebases=["cpp-ethereum", "tests"]),
        ForceScheduler(
            name="force-cpp-ethereum-%s-osx-evmjit" % branch,
            builderNames=["OSX C++ %s evmjit" % branch],
            codebases=["cpp-ethereum", "tests"]),
        ForceScheduler(
            name="force-go-ethereum-%s-osx" % branch,
            builderNames=["OSX Go %s branch" % branch],
            codebases=["go-ethereum", "go-build"]),
        ForceScheduler(
            name="force-cpp-ethereum-%s-brew" % branch,
            builderNames=["OSX C++ %s brew" % branch],
            codebases=["homebrew-ethereum", "cpp-ethereum", "tests"]),
        ForceScheduler(
            name="force-go-ethereum-%s-brew" % branch,
            builderNames=["OSX Go %s brew" % branch],
            codebases=["homebrew-ethereum", "go-ethereum"]),
        ForceScheduler(
            name="force-cpp-ethereum-%s-win" % branch,
            builderNames=["Windows C++ %s branch" % branch],
            codebases=["cpp-ethereum", "tests"]),
        ForceScheduler(
            name="force-pyethereum-%s" % branch,
            builderNames=["Linux PyEthereum %s" % branch],
            codebases=["pyethereum"]),
        ForceScheduler(
            name="force-serpent-%s" % branch,
            builderNames=["Linux Serpent %s" % branch],
            codebases=["serpent"]),
        ForceScheduler(
            name="force-pyethereum-osx-%s" % branch,
            builderNames=["OSX PyEthereum %s" % branch],
            codebases=["pyethereum"]),
        ForceScheduler(
            name="force-serpent-osx-%s" % branch,
            builderNames=["OSX Serpent %s" % branch],
            codebases=["serpent"])
    ]: c['schedulers'].append(scheduler)

for scheduler in [
    ForceScheduler(
        name="force-ethereumj",
        builderNames=["Linux EthereumJ"],
        codebases=["ethereumj"]),

    # Pull requests
    # Linux
    ForceScheduler(
        name="force-cpp-ethereum-pr",
        builderNames=["Linux C++ pull requests"],
        codebases=["cpp-ethereum", "tests"]),
    ForceScheduler(
        name="force-go-ethereum-pr",
        builderNames=["Linux Go pull requests"],
        codebases=["go-ethereum"]),
    ForceScheduler(
        name="force-pyethereum-pr",
        builderNames=["Linux PyEthereum PRs"],
        codebases=["pyethereum"]),
    ForceScheduler(
        name="force-serpent-pr",
        builderNames=["Linux Serpent PRs"],
        codebases=["pyethereum"]),
    ForceScheduler(
        name="force-ethereumj-pr",
        builderNames=["Linux EthereumJ PRs"],
        codebases=["ethereumj"]),

    # OSX
    ForceScheduler(
        name="force-cpp-ethereum-osx-pr",
        builderNames=["OSX C++ pull requests"],
        codebases=["cpp-ethereum", "tests"]),
    ForceScheduler(
        name="force-go-ethereum-osx-pr",
        builderNames=["OSX Go pull requests"],
        codebases=["go-ethereum", "go-build"]),
    ForceScheduler(
        name="force-pyethereum-osx-pr",
        builderNames=["OSX PyEthereum PRs"],
        codebases=["pyethereum"]),
    ForceScheduler(
        name="force-serpent-osx-pr",
        builderNames=["OSX Serpent PRs"],
        codebases=["serpent"]),

    # Windows
    ForceScheduler(
        name="force-cpp-ethereum-win-pr",
        builderNames=["Windows C++ pull requests"],
        codebases=["cpp-ethereum", "tests"])
]: c['schedulers'].append(scheduler)

for buildslave in ["one", "two"]:
    for scheduler in [
        Nightly(
            name="nightly-buildslave-cpp-%s" % buildslave,
            builderNames=["buildslave-cpp-%s" % buildslave],
            codebases=dockers_codebases,
            branch=None,
            hour=3,
            minute=0),
        Nightly(
            name="nightly-buildslave-go-%s" % buildslave,
            builderNames=["buildslave-go-%s" % buildslave],
            codebases=dockers_codebases,
            branch=None,
            hour=3,
            minute=0),
        Nightly(
            name="nightly-buildslave-python-%s" % buildslave,
            builderNames=["buildslave-python-%s" % buildslave],
            codebases=dockers_codebases,
            branch=None,
            hour=3,
            minute=30),
        Nightly(
            name="nightly-buildslave-java-%s" % buildslave,
            builderNames=["buildslave-java-%s" % buildslave],
            codebases=dockers_codebases,
            branch=None,
            hour=3,
            minute=30)
    ]: c['schedulers'].append(scheduler)

# for architecture in ['i386', 'amd64']:
for distribution in ['trusty', 'utopic']:
    for scheduler in [
        # Triggerable(
        #     name="libcryptopp-%s-%s" % (architecture, distribution),
        #     builderNames=["libcryptopp %s-%s" % (architecture, distribution)]),
        # Triggerable(
        #     name="libjson-rpc-cpp-%s-%s" % (architecture, distribution),
        #     builderNames=["libjson-rpc-cpp %s-%s" % (architecture, distribution)]),
        ForceScheduler(
            name="force-libcryptopp-%s-%s" % ("amd64", distribution),
            builderNames=["libcryptopp %s-%s" % ("amd64", distribution)],
            # codebases=["cryptopp"],
            repository=FixedParameter(name="repository", default=""),
            project=FixedParameter(name="project", default=""),
            branch=FixedParameter(name="branch", default="master"),
            revision=
                StringParameter(
                    name="revision",
                    label="Revision:<br>",
                    default="81fd1114fa64ee680ad642063aa29c3f62a44cdd",
                    required=True,
                    size=40),
            properties=[
                StringParameter(
                    name="version",
                    label="Version:<br>",
                    default="5.6.2",
                    required=True,
                    size=20)
            ]),
        ForceScheduler(
            name="force-libjson-rpc-cpp-%s-%s" % ("amd64", distribution),
            builderNames=["libjson-rpc-cpp %s-%s" % ("amd64", distribution)],
            # codebases=["json-rpc-cpp"],
            repository=FixedParameter(name="repository", default=""),
            project=FixedParameter(name="project", default=""),
            branch=FixedParameter(name="branch", default="master"),
            revision=
                StringParameter(
                    name="revision",
                    label="Revision:<br>",
                    default="5dce039508d17ed1717eacf46be34d1a1eea1c87",
                    required=True,
                    size=40),
            properties=[
                StringParameter(
                    name="version",
                    label="Version:<br>",
                    default="0.4.2",
                    required=True,
                    size=10)
            ])
    ]: c['schedulers'].append(scheduler)

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process import properties
from buildbot.process.properties import Interpolate
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.master import MasterShellCommand, SetProperty
from buildbot.steps.package.deb.lintian import DebLintian
from buildbot.steps.package.deb.pbuilder import UbuCowbuilder
from buildbot.steps.shell import Configure, Compile, SetPropertyFromCommand, ShellCommand, Test, WarningCountingShellCommand
from buildbot.steps.transfer import FileDownload, FileUpload, DirectoryUpload
from buildbot.steps.trigger import Trigger
from buildbot.steps.vstudio import MsBuild12
from buildbot.status.results import SUCCESS, WARNINGS, SKIPPED # FAILURE, EXCEPTION, RETRY
from buildbot import locks
# from buildbot.steps.cppcheck import Cppcheck # TODO native on nine

self_lock = locks.SlaveLock("self_update", maxCount = 1)
build_lock = locks.SlaveLock("slave_builds", maxCount = 2)
package_lock = locks.SlaveLock("slave_packaging", maxCount = 4)
go_lock = locks.SlaveLock("go_builds", maxCount = 1)
osx_lock = locks.SlaveLock("osx_builds", maxCount = 2)
brew_lock = locks.SlaveLock("brew_builds", maxCount = 1)
win_lock = locks.SlaveLock("win_builds", maxCount = 2)

# def _no_warnings(self):
#     fail = False
#     steps = self.build.getStatus().getSteps()
#     for step in steps:
#         (step_result, text) = step.getResults()
#         if step_result != SUCCESS and step_result != SKIPPED and step_result != None:
#             fail = True
#     if fail:
#         return False
#     else:
#         return True

@properties.renderer
def get_time_string(props):
    return time.strftime("%Y%m%d%H%M%S", time.localtime())

@properties.renderer
def get_cpp_revision(props):
    if props.has_key('got_revision'):
        return props['got_revision']['cpp-ethereum']
    return None

@properties.renderer
def get_short_revision(props):
    if props.has_key('got_revision'):
        return props['got_revision']['cpp-ethereum'][:7]
    return None

@properties.renderer
def get_short_revision_go(props):
    if props.has_key('got_revision'):
        return props['got_revision']['go-ethereum'][:7]
    return None

@properties.renderer
def _buildslave_stop_cmd(props):
    if props.has_key('last-container'):
        cmds = []
        for container in props['last-container'].splitlines():
            cmds.append("docker stop %s" % container)
        return " && ".join(cmds)
    return None

@properties.renderer
def dev_snapshot(props):
    return "SNAPSHOT%s" % time.strftime("%Y%m%d%H%M%S", time.localtime())

@properties.renderer
def jsonrpc_for_develop(props):
    if props.has_key('version'):
        return int(props['version'][2:3]) > 3
    return None

@properties.renderer
def urlbuildername(props):
    if props.has_key('buildername'):
        return urllib.quote(props['buildername'])
    return None

#
# Self-update factory
#
def self_update_factory():
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            name = 'Update',
            repourl = 'https://github.com/ethereum/ethereum-buildbot.git',
            mode = 'incremental',
            codebase = 'ethereum-buildbot',
            retry = (5, 3)
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name = 'Copy samples',
            description = 'copying samples',
            descriptionDone = 'copy samples',
            command = 'cp slaves.json.sample slaves.json && cp users.json.sample users.json && cp ircbot.json.sample ircbot.json && cp tokens.json.sample tokens.json && cp changehook.passwd.sample changehook.passwd'
        ),
        ShellCommand(
            logEnviron = False,
            name = 'Check',
            description = 'running checkconfig',
            descriptionDone = 'checkconfig',
            command = ['buildbot', 'checkconfig', '.'],
            flunkOnWarnings = True,
            flunkOnFailure = True,
            haltOnFailure = True,
            warnOnFailure = False,
            interruptSignal = 15
        ),
        MasterShellCommand(
            haltOnFailure = True,
            name = 'Live update',
            description = 'updating',
            descriptionDone = 'update',
            command = ['git', 'pull']
        ),
        MasterShellCommand(
            haltOnFailure = True,
            name = 'Reload',
            description = 'reloading',
            descriptionDone = 'reload',
            command = ['buildbot', 'reconfig', '.']
        )
    ]: factory.addStep(step)

    return factory


#
# Buildslave factories
#
def buildslave_factory(lang="cpp", client="cpp-ethereum"):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/ethereum-dockers.git',
            mode='incremental',
            codebase='ethereum-dockers',
            retry=(5, 3)
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="cleanup",
            description="cleaning up",
            descriptionDone="clean up",
            command=["./bin/docker-cleanup"],
            decodeRC={0:SUCCESS, 1:WARNINGS, 123:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="docker-%s" % lang,
            description="building %s base" % lang,
            descriptionDone="build %s base" % lang,
            command=["docker", "build", "--no-cache", "-t", "cptobvious/%s-base" % client, "%s-base" % client],
            timeout=1800
        ),
        ShellCommand(
            logEnviron = False,
            name="docker-%s-push" % lang,
            command=["docker", "push", "cptobvious/%s-base" % client],
            warnOnFailure=True,
            decodeRC={0:SUCCESS, 1:WARNINGS}
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="last-container",
            command="docker ps -a | grep buildslave-%s | awk '{print $1}'" % lang,
            property="last-container"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="buildslave-%s" % lang,
            description="building %s buildslave" % lang,
            descriptionDone="build %s buildslave" % lang,
            command=["docker", "build", "--no-cache", "-t", "cptobvious/buildslave-%s" % lang, "%s-buildslave" % client],
            timeout=1800
        )
    ]: factory.addStep(step)

    # Use when dependencies differ between master and develop
    if lang in ['cpp', 'go']:
        for step in [
            ShellCommand(
                warnOnFailure = True,
                logEnviron = False,
                name="buildslave-%s-develop" % lang,
                description="building %s develop buildslave" % lang,
                descriptionDone="build %s develop buildslave" % lang,
                command=["docker", "build", "--no-cache", "-t", "cptobvious/buildslave-%s-develop" % lang, "%s-buildslave-develop" % client],
                timeout=1800
            )
        ]: factory.addStep(step)

    if lang in ['cpp', 'go']:
        factory.addStep(
            ShellCommand(
                warnOnFailure = True,
                logEnviron = False,
                name="buildslave-%s-deb" % lang,
                description="building %s deb buildslave" % lang,
                descriptionDone="build %s deb buildslave" % lang,
                command=["docker", "build", "--no-cache", "-t", "cptobvious/buildslave-%s-deb" % lang, "%s-buildslave-deb" % client]
            )
        )

    for step in [
        ShellCommand(
            warnOnFailure = True,
            logEnviron = False,
            name="buildslave-%s-pr" % lang,
            description="building %s pr buildslave" % lang,
            descriptionDone="build %s pr buildslave" % lang,
            command=["docker", "build", "--no-cache", "-t", "cptobvious/buildslave-%s-pr" % lang, "%s-buildslave-pr" % client]
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="buildslave-%s-stop" % lang,
            description="stopping %s buildslave" % lang,
            descriptionDone="stop %s buildslave" % lang,
            command=_buildslave_stop_cmd,
            decodeRC={0:SUCCESS, 1:WARNINGS, 2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="buildslave-%s-run" % lang,
            description="starting %s buildslave" % lang,
            descriptionDone="start %s buildslave" % lang,
            command=["docker", "run", "-d", "-t", "cptobvious/buildslave-%s" % lang]
        ),
        ShellCommand(
            warnOnFailure = True,
            logEnviron = False,
            name="buildslave-%s-pr-run" % lang,
            description="starting %s pr buildslave" % lang,
            descriptionDone="start %s pr buildslave" % lang,
            command=["docker", "run", "-d", "-t", "cptobvious/buildslave-%s-pr" % lang]
        )
    ]: factory.addStep(step)

    # Use when dependencies differ between master and develop
    if lang in ['cpp', 'go']:
        for step in [
            ShellCommand(
                warnOnFailure = True,
                logEnviron = False,
                name="buildslave-%s-develop-run" % lang,
                description="starting %s develop buildslave" % lang,
                descriptionDone="start %s develop buildslave" % lang,
                command=["docker", "run", "-d", "-t", "cptobvious/buildslave-%s-develop" % lang]
            )
        ]: factory.addStep(step)

    if lang in ['cpp', 'go']:
        for step in [
            ShellCommand(
                warnOnFailure = True,
                logEnviron = False,
                name="buildslave-%s-deb-run" % lang,
                description="starting %s deb buildslave" % lang,
                descriptionDone="start %s deb buildslave" % lang,
                command=["docker", "run", "-d", "--privileged=true", "-t", "cptobvious/buildslave-%s-deb" % lang]
            )
        ]: factory.addStep(step)

    return factory


#
# Linux factories
#
def cmake_cmd(cmd=[], ccache=True, evmjit=False):
    if evmjit:
        cmd.append("-DLLVM_DIR=/usr/share/llvm-3.5/cmake")
        cmd.append("-DEVMJIT=1")
    elif ccache:
        cmd.append("-DCMAKE_CXX_COMPILER=/usr/lib/ccache/g++")
    return cmd

def testeth_cmd(cmd=[], evmjit=False):
    if evmjit:
        cmd.append("--jit")
    return cmd

# C++
def cpp_ethereum_factory(branch='master', deb=False, evmjit=False):
    factory = BuildFactory()

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/cpp-ethereum.git',
            branch=branch,
            mode='full',
            method = 'copy',
            codebase='cpp-ethereum',
            retry=(5, 3)
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/tests.git',
            branch=branch,
            mode='incremental',
            codebase='tests',
            retry=(5, 3),
            workdir='tests'
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*c_databaseVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "database"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command='sed -ne "s/.*c_protocolVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property="protocol"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command='sed -ne "s/.*Version = \\"\(.*\)\\";/\\1/p" libdevcore/Common.cpp',
            property="version"
        ),
        Configure(
            haltOnFailure = True,
            logEnviron = False,
            command=cmake_cmd(["cmake", "."], evmjit=evmjit),
        ),
        Compile(
            haltOnFailure = True,
            logEnviron = False,
            command="make -j $(cat /proc/cpuinfo | grep processor | wc -l)"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="installing",
            descriptionDone="install",
            command=["make", "install"]
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="running ldconfig",
            descriptionDone="ldconfig",
            command=["ldconfig"]
        ),
        Test(
            haltOnFailure = True,
            warnOnFailure = True,
            logEnviron = False,
            name="test-cpp-strict",
            description="strict testing",
            descriptionDone="strict test",
            command=testeth_cmd(["./testeth", "-t", "devcrypto,jsonrpc,Solidity*,whisper"], evmjit=evmjit),
            env={'CTEST_OUTPUT_ON_FAILURE': '1', 'ETHEREUM_TEST_PATH': Interpolate('%(prop:workdir)s/tests')},
            workdir="build/test"
        )
    ]: factory.addStep(step)

    # Trigger check and deb builders after strict tests
    if not evmjit:
        for step in [
            Trigger(
                schedulerNames=["cpp-ethereum-%s-check" % branch],
                waitForFinish=False,
                set_properties={
                    "database": Interpolate("%(prop:database)s"),
                    "protocol": Interpolate("%(prop:protocol)s"),
                    "version": Interpolate("%(prop:version)s")
                }
            )
        ]: factory.addStep(step)

        if deb:
            for architecture in ['i386', 'amd64']:
                for distribution in ['trusty', 'utopic']:
                    for step in [
                        Trigger(
                            schedulerNames=["cpp-ethereum-%s-%s-%s" % (branch, architecture, distribution)],
                            waitForFinish=False,
                            set_properties={
                                "version": Interpolate("%(prop:version)s")
                            }
                        )
                    ]: factory.addStep(step)

    # Run all tests, warnings let the build pass, failures marks the build with warnings
    for step in [
        ShellCommand(
            flunkOnFailure = False,
            warnOnFailure = True,
            logEnviron = False,
            name="test-cpp",
            description="testing",
            descriptionDone="test",
            command=testeth_cmd(["./testeth"], evmjit=evmjit),
            env={'CTEST_OUTPUT_ON_FAILURE': '1', 'ETHEREUM_TEST_PATH': Interpolate('%(prop:workdir)s/tests')},
            workdir="build/test",
            decodeRC={0:SUCCESS, 1:WARNINGS, 201:WARNINGS}
        )
    ]: factory.addStep(step)

    # Trigger PoC server buildslave and a test node
    if deb and not evmjit:
        for step in [
            Trigger(
                schedulerNames=["cpp-ethereum-%s-server" % branch],
                waitForFinish=False,
                set_properties={
                    "database": Interpolate("%(prop:database)s"),
                    "protocol": Interpolate("%(prop:protocol)s"),
                    "version": Interpolate("%(prop:version)s")
                }
            ),
            FileDownload(
                haltOnFailure = True,
                descriptionDone="download init script",
                mastersrc="eth-supervisord.conf",
                slavedest="eth-supervisord.conf"
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name="stop",
                description="stopping",
                descriptionDone="stop",
                command="kill `ps aux | grep 'supervisord -c eth-supervisord.conf' | awk '{print $2}'` && kill `pidof eth` && sleep 5",
                decodeRC={-1: SUCCESS, 0:SUCCESS, 1:WARNINGS, 2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name="start",
                description="starting",
                descriptionDone="start",
                command="supervisord -c eth-supervisord.conf && sleep 15",
                logfiles={
                    "eth.log": "eth.log",
                    "eth.err": "eth.err",
                    "supervisord.log": "eth-supervisord.log"
                },
                lazylogfiles=True
            )
        ]: factory.addStep(step)

    return factory


def cpp_ethereum_server_factory(branch='master'):
    factory = BuildFactory()

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/cpp-ethereum.git',
            branch=branch,
            mode='full',
            method = 'copy',
            codebase='cpp-ethereum',
            retry=(5, 3)
        ),
        Configure(
            haltOnFailure = True,
            logEnviron = False,
            command=["cmake", ".", "-DCMAKE_CXX_COMPILER=/usr/lib/ccache/g++"]
        ),
        Compile(
            haltOnFailure = True,
            logEnviron = False,
            command="make -j $(cat /proc/cpuinfo | grep processor | wc -l)"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="installing",
            descriptionDone="install",
            command=["sudo", "make", "install"]
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="running ldconfig",
            descriptionDone="ldconfig",
            command=["sudo", "ldconfig"]
        ),
        FileDownload(
            haltOnFailure = True,
            descriptionDone="download init script",
            mastersrc="eth-supervisord-%s.conf" % branch,
            slavedest="eth-supervisord-%s.conf" % branch
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="stop",
            description="stopping",
            descriptionDone="stop",
            command="kill `ps aux | grep 'supervisord -c eth-supervisord-%s.conf' | awk '{print $2}'` && kill `pidof eth` && sleep 5" % branch,
            decodeRC={-1: SUCCESS, 0:SUCCESS, 1:WARNINGS, 2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="start",
            description="starting",
            descriptionDone="start",
            command="supervisord -c eth-supervisord-%s.conf && sleep 60" % branch,
            logfiles={
                "eth.log": "eth.log",
                "eth.err": "eth.err",
                "supervisord.log": "eth-supervisord.log"
            },
            lazylogfiles=True
        )
    ]: factory.addStep(step)

    return factory


def cpp_check_factory(branch='develop'):
    factory = BuildFactory()

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/cpp-ethereum.git',
            branch=branch,
            mode='full',
            method = 'copy',
            codebase='cpp-ethereum',
            retry=(5, 3)
        ),
        WarningCountingShellCommand(
            logEnviron = False,
            name="cppcheck",
            description="running cppcheck",
            descriptionDone="cppcheck",
            command=["cppcheck", "--force", "--enable=all", "--template", "gcc", "."]
        )
    ]: factory.addStep(step)

    return factory

def osx_cpp_check_factory(branch='develop'):
    factory = BuildFactory()

    scan_build_path = "/usr/local/opt/llvm/share/clang/tools/scan-build"
    analyzer = "c++-analyzer"

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/cpp-ethereum.git',
            branch=branch,
            mode='full',
            method = 'copy',
            codebase='cpp-ethereum',
            retry=(5, 3)
        ),
        Configure(
            haltOnFailure = True,
            logEnviron = False,
            command=["cmake", ".", "-DCMAKE_CXX_COMPILER=%s/%s" % (scan_build_path, analyzer)]
        ),
        Compile(
            logEnviron = False,
            name = "scan-build",
            command = ["%s/scan-build" % scan_build_path, "--use-analyzer=%s/%s" % (scan_build_path, analyzer), "make", "-j", "6"]
        )
    ]: factory.addStep(step)

    return factory


def deb_factory(name=None, repourl=None, ppabranch=None, branch='master', distribution='trusty', architecture='i386'):
    factory = BuildFactory()

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl=repourl,
            branch=branch,
            mode='full',
            method='copy',
            retry=(5, 3)
        ),

        # Set snapshot property for Launchpad versioning
        SetProperty(
            description="setting snapshot",
            descriptionDone="set snapshot",
            name="set-snapshot",
            property="snapshot",
            value=Interpolate("+%(prop:buildnumber)s%(kw:snapshot)s%(kw:distribution)s", snapshot=(dev_snapshot if branch=='develop' else ""), distribution=distribution)
        )
    ]: factory.addStep(step)

    # Run 'go get' for go-ethereum
    if name == 'go-ethereum':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                command=_go_cmds(branch=branch),
                description="go getting",
                descriptionDone="go get",
                env={"GOPATH": Interpolate("%(prop:workdir)s/go")}
            ),
            ShellCommand(
                logEnviron = False,
                name="source-tarball",
                description="creating source tarball",
                descriptionDone="create source tarball",
                command=Interpolate("tar --exclude .git -czf ../%(kw:name)s_%(prop:version)s%(prop:snapshot)s.orig.tar.gz .", name=name),
                workdir=Interpolate("%(prop:workdir)s/go")
            ),
            # clean up the Git checkout for debuild, move go folder as new build folder
            ShellCommand(
                logEnviron = False,
                command="rm -rf build && mkdir build",
                description="cleaning build",
                descriptionDone="clean build",
                workdir=Interpolate("%(prop:workdir)s")
            )
        ]: factory.addStep(step)

    # Just create the source tarball for others
    else:
        factory.addStep(ShellCommand(
            logEnviron = False,
            name="source-tarball",
            description="creating source tarball",
            descriptionDone="create source tarball",
            command=Interpolate("tar --exclude .git -czf ../%(kw:name)s_%(prop:version)s%(prop:snapshot)s.orig.tar.gz .", name=name)
        ))

    for step in [
        # Get debian/ directory
        ShellCommand(
            logEnviron = False,
            name="get-debian",
            description="getting debian folder",
            descriptionDone="get debian folder",
            command=Interpolate("wget https://github.com/ethereum/ethereum-ppa/archive/%(kw:ppabranch)s.tar.gz -O- | tar -zx --exclude package.sh --exclude README.md --strip-components=1", ppabranch=ppabranch)
        ),

        # Bump version
        ShellCommand(
            logEnviron = False,
            name="bump-debian",
            description="bumping %s deb version" % distribution,
            descriptionDone="bump %s deb version" % distribution,
            command=Interpolate("EMAIL='caktux (Buildserver key) <caktux@gmail.com>' dch -v %(prop:version)s%(prop:snapshot)s-0ubuntu1 'git build of %(prop:got_revision)s'", dist=distribution)
        ),

        # Build a source package
        ShellCommand(
            logEnviron = False,
            name="source-package",
            description="debuilding %s" % distribution,
            descriptionDone="debuild %s" % distribution,
            command="debuild -S -sa -us -uc"
        ),
    ]: factory.addStep(step)

    # Source only packages for dependencies, build local deb packages otherwise
    if name in ['ethereum', 'go-ethereum']:
        # Add pbuilderrc with ccache config
        # factory.addStep(FileDownload(
        #     mastersrc="pbuilderrc",
        #     slavedest="~/.pbuilderrc"
        # ))

        # Set othermirror for pbuilder
        if name == 'go-ethereum':
            if branch == 'master':
                otherppa = "http://ppa.launchpad.net/ubuntu-sdk-team/ppa/ubuntu"
            else:
                otherppa = "http://ppa.launchpad.net/beineri/opt-qt54-trusty/ubuntu"

            factory.addStep(ShellCommand(
                logEnviron = False,
                name="pbuilder-opts",
                description="setting pbuilderrc",
                descriptionDone="set pbuilderrc",
                command="echo 'OTHERMIRROR=\"deb [trusted=yes] %s %s main|deb-src [trusted=yes] %s %s main\"' > ~/.pbuilderrc" % (otherppa, distribution, otherppa, distribution),
            ))
        elif name == 'ethereum':
            if branch == 'develop':
                factory.addStep(ShellCommand(
                    logEnviron = False,
                    name="pbuilder-opts",
                    description="setting pbuilderrc",
                    descriptionDone="set pbuilderrc",
                    command="echo 'OTHERMIRROR=\"deb [trusted=yes] http://ppa.launchpad.net/ethereum/ethereum/ubuntu %s main|deb-src [trusted=yes] http://ppa.launchpad.net/ethereum/ethereum/ubuntu %s main|deb [trusted=yes] http://ppa.launchpad.net/ethereum/ethereum-dev/ubuntu %s main|deb-src [trusted=yes] http://ppa.launchpad.net/ethereum/ethereum-dev/ubuntu %s main\"' > ~/.pbuilderrc" % (distribution, distribution, distribution, distribution),
                ))
            else:
                factory.addStep(ShellCommand(
                    logEnviron = False,
                    name="pbuilder-opts",
                    description="setting pbuilderrc",
                    descriptionDone="set pbuilderrc",
                    command="echo 'OTHERMIRROR=\"deb [trusted=yes] http://ppa.launchpad.net/ethereum/ethereum/ubuntu %s main|deb-src [trusted=yes] http://ppa.launchpad.net/ethereum/ethereum/ubuntu %s main\"' > ~/.pbuilderrc" % (distribution, distribution),
                ))

        for step in [
            # Package that thing already
            UbuCowbuilder(
                logEnviron = False,
                architecture=architecture,
                distribution=distribution,
                basetgz="/var/cache/pbuilder/%s-%s-ethereum.cow" % (distribution, architecture),
                keyring="/usr/share/keyrings/ubuntu-archive-keyring.gpg"
            )
        ]: factory.addStep(step)

    for step in [
        # Run Lintian
        # DebLintian(
        #     fileloc=Interpolate("%(prop:deb-changes)s")
        # ),

        # Gather artefacts
        ShellCommand(
            haltOnFailure=True,
            logEnviron = False,
            name="move-packages",
            description='moving packages',
            descriptionDone='move packages',
            command="mkdir result; mv %s ../*.changes ../*.dsc ../*.gz result/" % ("*.deb *.changes" if name in ['ethereum', 'go-ethereum'] else ""),
        ),

        # Upload result folder
        DirectoryUpload(
            slavesrc="result",
            masterdest=Interpolate("public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s"),
            url=Interpolate("/builds/%(prop:buildername)s/%(prop:buildnumber)s"),
        ),

        # Clean latest link
        MasterShellCommand(
            name='clean-latest',
            description='cleaning latest link',
            descriptionDone='clean latest link',
            command=['rm', '-f', Interpolate("public_html/builds/%(prop:buildername)s/latest")]
        ),

        # Link latest
        MasterShellCommand(
            name='link-latest',
            description='linking latest',
            descriptionDone='link latest',
            command=['ln', '-sf', Interpolate("%(prop:buildnumber)s"), Interpolate("public_html/builds/%(prop:buildername)s/latest")]
        ),

        # Create source changes folders
        MasterShellCommand(
            name='mkdir-changes',
            description='mkdir',
            descriptionDone='mkdir',
            command=['mkdir', '-p', Interpolate("changes/%(kw:dist)s/%(kw:arch)s/%(kw:name)s", dist=distribution, arch=architecture, name=name)]
        ),

        # Link source changes
        MasterShellCommand(
            name='link-changes',
            description='linking changes',
            descriptionDone='link changes',
            command=['ln', '-sf', Interpolate("../../../../public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s"), Interpolate("changes/%(kw:dist)s/%(kw:arch)s/%(kw:name)s", dist=distribution, arch=architecture, name=name)]
        )
    ]: factory.addStep(step)

    # Use ethereum-dev ppa for snapshots, only dput one source pkg
    if architecture == 'amd64':
        for step in [
            # Prepare .changes file for Launchpad
            MasterShellCommand(
                name='prepare-changes',
                description='preparing changes',
                descriptionDone='prepare changes',
                command=['sed', '-i', '-e', Interpolate('s/UNRELEASED/%(kw:dist)s/', dist=distribution), '-e', 's/urgency=medium/urgency=low/', Interpolate('changes/%(kw:dist)s/%(kw:arch)s/%(kw:name)s/%(prop:buildnumber)s/%(kw:name)s_%(prop:version)s%(prop:snapshot)s-0ubuntu1_source.changes', dist=distribution, arch=architecture, name=name)]
            ),
            # debsign
            MasterShellCommand(
                name='debsign',
                description='debsigning',
                descriptionDone='debsign',
                command=['debsign', Interpolate("changes/%(kw:dist)s/%(kw:arch)s/%(kw:name)s/%(prop:buildnumber)s/%(kw:name)s_%(prop:version)s%(prop:snapshot)s-0ubuntu1_source.changes", dist=distribution, arch=architecture, name=name)]
            ),
            # dput
            MasterShellCommand(
                name='dput',
                description='dputting',
                descriptionDone='dput',
                command=['dput', 'ppa:ethereum/ethereum%s' % ("-dev" if branch=='develop' or (name == 'libjson-rpc-cpp' and jsonrpc_for_develop) else ""), Interpolate("changes/%(kw:dist)s/%(kw:arch)s/%(kw:name)s/%(prop:buildnumber)s/%(kw:name)s_%(prop:version)s%(prop:snapshot)s-0ubuntu1_source.changes", dist=distribution, arch=architecture, name=name)]
            )
        ]: factory.addStep(step)

    return factory


# Go
def _go_cmds(branch='master'):
    cmds = [
        "mkdir -p $GOPATH/src/github.com/ethereum",
        "cp -a . $GOPATH/src/github.com/ethereum/go-ethereum",

        "cd $GOPATH/src/github.com/ethereum/go-ethereum"
    ]
    if branch == 'master':
        cmds.append("go get -v -d -t ./...")
    else:
        cmds.append("go get github.com/tools/godep")
        cmds.append("godep restore")

    return " && ".join(cmds)

def go_ethereum_factory(branch='master', deb=False):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/go-ethereum.git',
            branch=branch,
            mode='incremental',
            codebase='go-ethereum',
            retry=(5, 3)
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = ('sed -ne "s/.*ProtocolVersion = \(.*\)/\\1/p" peer.go' if branch=='master' else 'sed -ne "s/.*ProtocolVersion    = \(.*\)/\\1/p" eth/protocol.go'),
            property = "protocol"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = ('sed -ne "s/.*P2PVersion = \(.*\)/\\1/p" peer.go' if branch=='master' else 'sed -ne "s/.*baseProtocolVersion.*= \(.*\)/\\1/p" p2p/protocol.go'),
            property = "p2p"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*Version.*= \\"\(.*\)\\"/\\1/p" cmd/ethereum/main.go',
            property = "version"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="go-cleanup",
            command="rm -rf $GOPATH",
            description="cleaning up",
            descriptionDone="clean up"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            command=_go_cmds(branch=branch),
            description="go getting",
            descriptionDone="go get"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="install-ethereum",
            description="installing ethereum",
            descriptionDone="install ethereum",
            command="go install -v github.com/ethereum/go-ethereum/cmd/ethereum"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="install-mist",
            description="installing mist",
            descriptionDone="install mist",
            command="go install -v github.com/ethereum/go-ethereum/cmd/mist"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="go-test",
            description="go testing",
            descriptionDone="go test",
            command="go test github.com/ethereum/go-ethereum/...",
            decodeRC={0:SUCCESS, 1:WARNINGS, 2:WARNINGS}
        ),
    ]: factory.addStep(step)

    if deb:
        for architecture in ['i386', 'amd64']:
            for distribution in ['trusty', 'utopic']:
                for step in [
                    Trigger(
                        schedulerNames=["go-ethereum-%s-%s-%s" % (branch, architecture, distribution)],
                        waitForFinish=False,
                        set_properties={
                            "version": Interpolate("%(prop:version)s")
                        }
                    )
                ]: factory.addStep(step)

    for step in [
        FileDownload(
            haltOnFailure = True,
            descriptionDone="download init script",
            mastersrc="eth-go-supervisord.conf",
            slavedest="eth-go-supervisord.conf"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="stop",
            description="stopping",
            descriptionDone="stop",
            command="kill `ps aux | grep 'supervisord -c eth-go-supervisord.conf' | awk '{print $2}'` && kill `pidof ethereum` && sleep 5",
            decodeRC={-1: SUCCESS, 0:SUCCESS, 1:WARNINGS, 2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="start",
            description="starting",
            descriptionDone="start",
            command="supervisord -c eth-go-supervisord.conf && sleep 15",
            logfiles={
                "ethereum.log": "ethereum.log",
                "ethereum.err": "ethereum.err",
                "supervisord.log": "eth-go-supervisord.log"
            },
            lazylogfiles=True
        )
    ]: factory.addStep(step)

    return factory


# Java
def ethereumj_factory(branch='master'):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/ethereumj.git',
            branch=branch,
            mode='full',
            method='copy',
            codebase='ethereumj',
            retry=(5, 3)
        ),
        ShellCommand(
            logEnviron=False,
            name="build",
            command=["./gradlew", "build", "--debug"],
            description="building",
            descriptionDone="gradlew"
        ),
        ShellCommand(
            logEnviron=False,
            name="install",
            command=["./gradlew", "install", "--debug"],
            description="installing",
            descriptionDone="install"
        )
    ]: factory.addStep(step)

    return factory


# Python
def pyethereum_factory(branch='master'):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/pyethereum.git',
            branch=branch,
            mode='incremental',
            codebase='pyethereum',
            retry=(5, 3)
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="pip-requirements",
            description="installing requirements",
            descriptionDone="install requirements",
            command=["pip", "install", "-r", "requirements.txt"]
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="pip-install",
            description="installing",
            descriptionDone="install",
            command=["pip", "install", "."]
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="pyeth-version",
            command=["pyeth", "-v"],
            property="version"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="test-requirements",
            description="installing test requirements",
            descriptionDone="install test requirements",
            command=["pip", "install", "-r", "dev_requirements.txt"]
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="test-submodule",
            descriptionDone="update test submodule",
            command="git submodule init && git submodule update --recursive"
        ),
        Test(
            flunkOnFailure = False,
            logEnviron = False,
            description="testing",
            descriptionDone="py.test",
            name="test-py.test",
            command="py.test"
        )
    ]: factory.addStep(step)

    return factory


@properties.renderer
def _serpent_tests(props):
    cmds = []
    contracts = [
        "crowdfund",
        "datafeed",
        "namecoin",
        "subcurrency",
        "schellingcoin/schellingdollar"
    ]
    for contract in contracts:
        cmds.append("printf '\\n\\npretty_compile contract:\\n' && serpent pretty_compile contract.se && printf '\\ncompile contract:\\n' && serpent compile contract.se".replace("contract", contract))
    tests = [
        "ecc/test.py"
    ]
    for test in tests:
        cmds.append("printf '\\n\\npy.test zetest:\\n' && py.test zetest".replace("zetest", test))
    return " && ".join(cmds)

def serpent_factory(branch='master'):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/serpent.git',
            branch='master',
            mode='incremental',
            codebase='serpent',
            retry=(5, 3)
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="pip-install",
            description="installing",
            descriptionDone="install",
            command=["pip", "install", "."]
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="serpent-version",
            command=["serpent", "-v"],
            property="version"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="test-requirements",
            description="installing test requirements",
            descriptionDone="install test requirements",
            command="pip install pytest && pip install pyethereum"
        ),
        Test(
            flunkOnFailure = False,
            logEnviron = False,
            command=_serpent_tests,
            description="testing",
            descriptionDone="test",
            workdir="build/examples"
        )
    ]: factory.addStep(step)
    return factory


#
# Windows factories
#
def win_cpp_factory(branch='master', isPullRequest=False):
    factory = BuildFactory()

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/cpp-ethereum.git',
            branch = branch,
            mode = 'full',
            method = 'copy',
            codebase = 'cpp-ethereum',
            retry = (5, 3)
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'sed -ne "s/.*c_databaseVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp'],
            property = "database"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'sed -ne "s/.*c_protocolVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp'],
            property="protocol"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = [r'C:\\Program Files (x86)\Git\bin\sh.exe', "--login", "-c", r'grep "Version" ./libdevcore/Common.cpp | sed "s/.*\"\(.*\)\".*/\1/"'],
            property = "version"
        ),
        Configure(
            haltOnFailure = True,
            logEnviron = False,
            command=["cmake", "."],
            workdir="build/extdep"
        ),
        MsBuild12(
            haltOnFailure = True,
            logEnviron = False,
            projectfile="project.sln",
            config="release",
            platform="Win32",
            workdir="build/extdep"
        ),
        Configure(
            haltOnFailure = True,
            logEnviron = False,
            command=["cmake", "."]
        ),
        MsBuild12(
            haltOnFailure = True,
            logEnviron = False,
            projectfile="ethereum.sln",
            config="release",
            platform="Win32"
        )
    ]: factory.addStep(step)

    if isPullRequest == False:
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                description = 'pack',
                descriptionDone= 'packed',
                command = ['7z', 'a', 'cpp-ethereum.7z', './alethzero/Release/*']
            ),
            SetProperty(
                description="setting filename",
                descriptionDone="set filename",
                name="set-filename",
                property="filename",
                value=Interpolate("AlethZero-Win32-%(kw:time_string)s-%(prop:version)s-%(prop:protocol)s-%(prop:database)s-%(kw:short_revision)s.7z", time_string=get_time_string, short_revision=get_short_revision)
            ),
            FileUpload(
                haltOnFailure = True,
                name = 'upload',
                slavesrc="cpp-ethereum.7z",
                masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:filename)s"),
                url = Interpolate("/builds/%(prop:buildername)s/%(prop:filename)s")
            ),
            MasterShellCommand(
                description = 'cleaning latest link',
                descriptionDone= 'clean latest link',
                command = ['rm', '-f', Interpolate("public_html/builds/%(prop:buildername)s/AlethZero-Win32-latest.7z")]
            ),
            MasterShellCommand(
                haltOnFailure = True,
                description = 'linking latest',
                descriptionDone= 'link latest',
                command = ['ln', '-sf', Interpolate("%(prop:filename)s"), Interpolate("public_html/builds/%(prop:buildername)s/AlethZero-Win32-latest.7z")]
            )
        ]: factory.addStep(step)

    return factory


#
# OSX factories
#
def brew_install_cmd(cmd=[], branch='master'):
    if branch == 'develop':
        cmd.append('--devel')
    return cmd

def cmake_osx_cmd(cmd=[], ccache=True, evmjit=False):
    if evmjit:
        for opt in [
            "-DLLVM_DIR=/usr/local/opt/llvm/share/llvm/cmake",
            "-DEVMJIT=1"
        ]: cmd.append(opt)
    elif ccache:
        cmd.append("-DCMAKE_CXX_COMPILER=/usr/local/opt/ccache/libexec/g++")
    return cmd

# C++
def osx_cpp_factory(branch='develop', isPullRequest=False, evmjit=False):
    factory = BuildFactory()

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/cpp-ethereum.git',
            branch = branch,
            mode = 'full',
            method = 'copy',
            codebase = 'cpp-ethereum',
            retry=(5, 3)
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/tests.git',
            branch=branch,
            mode='incremental',
            codebase='tests',
            retry=(5, 3),
            workdir='tests'
        )
    ]: factory.addStep(step)

    if branch == 'master':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-unlink',
                description="brew unlinking",
                descriptionDone="brew unlink",
                command=['brew', 'unlink', 'libjson-rpc-cpp']
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-link',
                description="brew linking",
                descriptionDone="brew link",
                command=['brew', 'link', 'jsonrpc']
            )
        ]: factory.addStep(step)
    else:
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-unlink',
                description="brew unlinking",
                descriptionDone="brew unlink",
                command=['brew', 'unlink', 'jsonrpc']
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-link',
                description="brew linking",
                descriptionDone="brew link",
                command=['brew', 'link', 'libjson-rpc-cpp']
            )
        ]: factory.addStep(step)

    for step in [
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*c_databaseVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property = "database"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command='sed -ne "s/.*c_protocolVersion = \(.*\);/\\1/p" libethcore/CommonEth.cpp',
            property="protocol"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command='sed -ne "s/.*Version = \\"\(.*\)\\";/\\1/p" libdevcore/Common.cpp',
            property="version"
        ),
        Configure(
            haltOnFailure = True,
            logEnviron = False,
            command = cmake_osx_cmd(['cmake', '.'], evmjit=evmjit)
        ),
        Compile(
            haltOnFailure = True,
            logEnviron = False,
            command = "make -j $(sysctl -n hw.ncpu)"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running make install',
            descriptionDone= 'make install',
            command = ['make', 'install'],
            workdir = 'build/alethzero'
        ),
        Test(
            haltOnFailure = True,
            warnOnFailure = True,
            logEnviron = False,
            name="test-cpp-strict",
            description="strict testing",
            descriptionDone="strict test",
            command=testeth_cmd(["./testeth", "-t", "devcrypto,jsonrpc,Solidity*,whisper"], evmjit=evmjit),
            env={'CTEST_OUTPUT_ON_FAILURE': '1', 'ETHEREUM_TEST_PATH': Interpolate('%(prop:workdir)s/tests')},
            workdir="build/test"
        ),
    ]: factory.addStep(step)

    if not evmjit:
        for step in [
            Trigger(
                schedulerNames=["cpp-ethereum-%s-osx-check" % branch],
                waitForFinish=False,
                set_properties={
                    "database": Interpolate("%(prop:database)s"),
                    "protocol": Interpolate("%(prop:protocol)s"),
                    "version": Interpolate("%(prop:version)s")
                }
            )
        ]: factory.addStep(step)

        if not isPullRequest:
            for step in [
                Trigger(
                    schedulerNames=["cpp-ethereum-%s-brew" % branch],
                    waitForFinish=False,
                    set_properties={
                        "database": Interpolate("%(prop:database)s"),
                        "protocol": Interpolate("%(prop:protocol)s"),
                        "version": Interpolate("%(prop:version)s")
                    }
                )
            ]: factory.addStep(step)

    for step in [
        ShellCommand(
            flunkOnFailure = False,
            warnOnFailure = True,
            logEnviron = False,
            name="test-cpp",
            description="testing",
            descriptionDone="test",
            command=testeth_cmd(["./testeth"], evmjit=evmjit),
            env={'CTEST_OUTPUT_ON_FAILURE': '1', 'ETHEREUM_TEST_PATH': Interpolate('%(prop:workdir)s/tests')},
            workdir="build/test",
            decodeRC={0:SUCCESS, 1:WARNINGS, 201:WARNINGS}
        )
    ]: factory.addStep(step)

    if not isPullRequest:
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                description = 'pack AlethZero.app',
                descriptionDone= 'packed AlethZero.app',
                command = ['tar', '-jcvf', 'alethzero/AlethZero.tar.bz2', 'alethzero/AlethZero.app']
            ),
            SetPropertyFromCommand(
                haltOnFailure = True,
                logEnviron = False,
                command = Interpolate('sha1sum alethzero/AlethZero.tar.bz2 | grep -o -w "\w\{40\}"'),
                property = 'sha1sum'
            ),
            SetProperty(
                description="setting filename",
                descriptionDone="set filename",
                name="set-filename",
                property="filename",
                value=Interpolate("AlethZero-OSX-%(kw:time_string)s-%(prop:version)s-%(prop:protocol)s-%(prop:database)s-%(kw:short_revision)s.tar.bz2", time_string=get_time_string, short_revision=get_short_revision)
            ),
            FileUpload(
                haltOnFailure = True,
                name = 'Upload AlethZero',
                slavesrc="alethzero/AlethZero.tar.bz2",
                masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:filename)s"),
                url = Interpolate("builds/%(prop:buildername)s/%(prop:filename)s")
            ),
            MasterShellCommand(
                description = 'cleaning latest link',
                descriptionDone= 'clean latest link',
                command = ['rm', '-f', Interpolate("public_html/builds/%(prop:buildername)s/AlethZero-OSX-latest.tar.bz2")]
            ),
            MasterShellCommand(
                haltOnFailure = True,
                description = 'linking latest',
                descriptionDone= 'link latest',
                command = ['ln', '-sf', Interpolate("%(prop:filename)s"), Interpolate("public_html/builds/%(prop:buildername)s/AlethZero-OSX-latest.tar.bz2")]
            )
        ]: factory.addStep(step)

    return factory


def brew_cpp_factory(branch='develop'):
    factory = BuildFactory()
    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/cpp-ethereum.git',
            branch = branch,
            mode = 'incremental',
            codebase = 'cpp-ethereum',
            retry=(5, 3)
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/homebrew-ethereum.git',
            branch = 'master',
            mode = 'incremental',
            codebase = 'homebrew-ethereum',
            retry=(5, 3),
            workdir = 'brew',
        )
    ]: factory.addStep(step)

    if branch == 'master':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-unlink',
                description="brew unlinking",
                descriptionDone="brew unlink",
                command=['brew', 'unlink', 'libjson-rpc-cpp']
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-link',
                description="brew linking",
                descriptionDone="brew link",
                command=['brew', 'link', 'jsonrpc']
            )
        ]: factory.addStep(step)
    else:
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-unlink',
                description="brew unlinking",
                descriptionDone="brew unlink",
                command=['brew', 'unlink', 'jsonrpc']
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-link',
                description="brew linking",
                descriptionDone="brew link",
                command=['brew', 'link', 'libjson-rpc-cpp']
            )
        ]: factory.addStep(step)

    if branch == 'master':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update version',
                command = Interpolate('sed -i "" "s/^  version \'\(.*\)\'/  version \'%(prop:version)s-%(prop:protocol)s-%(prop:database)s\'/" ethereum.rb'),
                workdir = 'brew',
            )
        ]: factory.addStep(step)

    if branch == 'develop':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update version',
                command = Interpolate('sed -i "" "s/^    version \'\(.*\)\'/    version \'%(prop:version)s-%(prop:protocol)s-%(prop:database)s\'/" ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git add',
                command = 'git add ethereum.rb',
                workdir = 'brew',
            ),
            ShellCommand(
                logEnviron = False,
                descriptionDone = 'git commit',
                command = Interpolate('git commit -m "bump to %(prop:version)s-%(prop:protocol)s-%(prop:database)s at ethereum/cpp-ethereum@%(kw:cpp_revision)s"', cpp_revision=get_short_revision),
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git push',
                command = 'git pull --no-edit && git push',
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS}
            )
        ]: factory.addStep(step)

    for step in [
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'cleaning up',
            descriptionDone = 'clean up',
            command = ["brew", "remove", "ethereum"],
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'brew updating',
            descriptionDone = 'brew update',
            command = ["brew", "update"],
            workdir = 'brew'
        ),
        Compile(
            haltOnFailure = True,
            logEnviron = False,
            description = 'brewing',
            descriptionDone = 'brew',
            command = brew_install_cmd(cmd=['brew', 'install', 'ethereum.rb', '-v', '--build-bottle'], branch=branch),
            workdir = 'brew',
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = "brew bottle ethereum -v %s | sed -ne 's/.*Bottling \(.*\)\.\.\./\\1/p'" % ("--devel" if branch=='develop' else ""),
            description = "bottling",
            descriptionDone = "bottle",
            property = 'bottle',
            workdir = 'brew'
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = Interpolate('sha1sum %(prop:bottle)s | grep -o -w "\w\{40\}"'),
            property = 'sha1sum',
            workdir = 'brew'
        ),
        FileUpload(
            haltOnFailure = True,
            name = 'upload-bottle',
            slavesrc=Interpolate("%(prop:bottle)s"),
            masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s/bottle/ethereum-%(prop:version)s-%(prop:protocol)s-%(prop:database)s.yosemite.bottle.%(prop:buildnumber)s.tar.gz"),
            url = Interpolate("/builds/%(prop:buildername)s/%(prop:buildnumber)s/bottle/ethereum-%(prop:version)s-%(prop:protocol)s-%(prop:database)s.yosemite.bottle.%(prop:buildnumber)s.tar.gz"),
            workdir = 'brew'
        )
    ]: factory.addStep(step)

    if branch == 'master':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update bottle url',
                command = Interpolate('sed -i "" "s/^    root_url \'\(.*\)\'/    root_url \'http:\/\/build.ethdev.com\/builds\/%(kw:urlbuildername)s\/%(prop:buildnumber)s\/bottle\'/" ethereum.rb', urlbuildername=urlbuildername),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update brew revision',
                command = Interpolate('sed -i "" "s/^    revision \(.*\)/    revision %(prop:buildnumber)s/" ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'bump bottle',
                command = Interpolate('sed -i "" "s/^    sha1 \'\(.*\)\' => :yosemite/    sha1 \'%(prop:sha1sum)s\' => :yosemite/" ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git add',
                command = 'git add ethereum.rb',
                workdir = 'brew',
            ),
            ShellCommand(
                logEnviron = False,
                descriptionDone = 'git commit',
                command = Interpolate('git commit -m "bump version to %(prop:version)s-%(prop:protocol)s-%(prop:database)s at %(kw:cpp_revision)s"', cpp_revision=get_cpp_revision),
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git push',
                command = 'git pull --no-edit && git push',
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS}
            )
        ]: factory.addStep(step)

    if branch == 'develop':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update bottle url',
                command = Interpolate('sed -i "" "s/^      root_url \'\(.*\)\'/      root_url \'http:\/\/build.ethdev.com\/builds\/%(kw:urlbuildername)s\/%(prop:buildnumber)s\/bottle\'/" ethereum.rb', urlbuildername=urlbuildername),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update brew revision',
                command = Interpolate('sed -i "" "s/^      revision \(.*\)/      revision %(prop:buildnumber)s/" ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'bump bottle',
                command = Interpolate('sed -i "" "s/^      sha1 \'\(.*\)\' => :yosemite/      sha1 \'%(prop:sha1sum)s\' => :yosemite/" ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update successful version',
                command = Interpolate('sed -i "" "s/^      version \'\(.*\)\'/      version \'%(prop:version)s-%(prop:protocol)s-%(prop:database)s\'/" ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update successful revision',
                command = Interpolate('sed -i "" "s/:revision => \'\(.*\)\'/:revision => \'%(kw:cpp_revision)s\'/" ethereum.rb', cpp_revision=get_cpp_revision),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git add',
                command = 'git add ethereum.rb',
                workdir = 'brew',
            ),
            ShellCommand(
                logEnviron = False,
                descriptionDone = 'git commit',
                command = Interpolate('git commit -m "bump successful to %(prop:version)s-%(prop:protocol)s-%(prop:database)s at ethereum/cpp-ethereum@%(kw:cpp_revision)s"', cpp_revision=get_short_revision),
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git push',
                command = 'git pull --no-edit && git push',
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'unload',
                command = ['launchctl', 'unload', '/usr/local/opt/ethereum/homebrew.mxcl.ethereum.plist'],
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'load',
                command = ['launchctl', 'load', '/usr/local/opt/ethereum/homebrew.mxcl.ethereum.plist'],
            ),
        ]: factory.addStep(step)
    return factory


# Go
def osx_go_factory(branch='develop', isPullRequest=False):
    factory = BuildFactory()

    env = {
        "GOPATH": Interpolate("%(prop:workdir)s/go"),
        "PKG_CONFIG_PATH": "/usr/local/opt/qt5/lib/pkgconfig",
        "CGO_CPPFLAGS": "-I/usr/local/opt/qt5/include/QtCore",
        "LD_LIBRARY_PATH": "/usr/local/opt/qt5/lib",
        'PATH': [Interpolate("%(prop:workdir)s/go/bin"), "${PATH}"]
    }

    if branch == 'master':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-switch',
                description="brew switching",
                descriptionDone="brew switch",
                command=['brew', 'switch', 'qt5', '5.3.2']
            )
        ]: factory.addStep(step)
    else:
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-switch',
                description="brew switching",
                descriptionDone="brew switch",
                command=['brew', 'switch', 'qt5', '5.4.0']
            )
        ]: factory.addStep(step)

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl='https://github.com/ethereum/go-ethereum.git',
            branch=branch,
            mode='incremental',
            codebase='go-ethereum',
            retry=(5, 3)
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/go-build.git',
            branch = 'master',
            mode = 'full',
            method = 'copy',
            codebase = 'go-build',
            retry=(5, 3),
            workdir = 'go-build-%s' % branch
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = ('sed -ne "s/.*ProtocolVersion = \(.*\)/\\1/p" peer.go' if branch=='master' else 'sed -ne "s/.*ProtocolVersion    = \(.*\)/\\1/p" eth/protocol.go'),
            property = "protocol"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = ('sed -ne "s/.*P2PVersion = \(.*\)/\\1/p" peer.go' if branch=='master' else 'sed -ne "s/.*baseProtocolVersion.*= \(.*\)/\\1/p" p2p/protocol.go'),
            property = "p2p"
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = 'sed -ne "s/.*Version.*= \\"\(.*\)\\"/\\1/p" cmd/ethereum/main.go',
            property = "version"
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="go-cleanup",
            command="rm -rf $GOPATH",
            description="cleaning up",
            descriptionDone="clean up",
            env={"GOPATH": Interpolate("%(prop:workdir)s/go")}
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description="go getting",
            descriptionDone="go get",
            command=_go_cmds(branch=branch),
            env=env
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="install-ethereum",
            description="installing ethereum",
            descriptionDone="install ethereum",
            command="cd $GOPATH/src/github.com/ethereum/go-ethereum/cmd/ethereum && go install -v",
            env=env
        ),
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            name="install-mist",
            description="installing mist",
            descriptionDone="install mist",
            command="cd $GOPATH/src/github.com/ethereum/go-ethereum/cmd/mist && go install -v",
            env=env
        )
    ]: factory.addStep(step)

    if isPullRequest == False:
        for step in [
            Trigger(
                schedulerNames=["go-ethereum-%s-brew" % branch],
                waitForFinish=False,
                set_properties={
                    "p2p": Interpolate("%(prop:p2p)s"),
                    "protocol": Interpolate("%(prop:protocol)s"),
                    "version": Interpolate("%(prop:version)s")
                }
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name = "go-build",
                description = 'go build',
                descriptionDone = 'go build',
                command = ['python', 'build.py'],
                workdir = 'go-build-%s/osx' % branch,
                decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS},
                env={"GOPATH": Interpolate("%(prop:workdir)s/go")}
            ),
            SetPropertyFromCommand(
                haltOnFailure = True,
                logEnviron = False,
                command = Interpolate('sha1sum osx/Mist.dmg | grep -o -w "\w\{40\}"'),
                property = 'sha1sum',
                workdir = 'go-build-%s' % branch
            ),
            SetProperty(
                description="setting filename",
                descriptionDone="set filename",
                name="set-filename",
                property="filename",
                value=Interpolate("Mist-OSX-%(kw:time_string)s-%(prop:version)s-%(prop:protocol)s-%(kw:short_revision)s.dmg", time_string=get_time_string, short_revision=get_short_revision_go)
            ),
            FileUpload(
                haltOnFailure = True,
                name = 'Upload Mist',
                slavesrc="osx/Mist.dmg",
                masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:filename)s"),
                url = Interpolate("/builds/%(prop:buildername)s/%(prop:filename)s"),
                workdir = 'go-build-%s' % branch
            ),
            MasterShellCommand(
                description = 'cleaning latest link',
                descriptionDone= 'clean latest link',
                command = ['rm', '-f', Interpolate("public_html/builds/%(prop:buildername)s/Mist-OSX-latest.dmg")]
            ),
            MasterShellCommand(
                haltOnFailure = True,
                description = 'linking latest',
                descriptionDone= 'link latest',
                command = ['ln', '-sf', Interpolate("%(prop:filename)s"), Interpolate("public_html/builds/%(prop:buildername)s/Mist-OSX-latest.dmg")]
            )
        ]: factory.addStep(step)

    return factory


def brew_go_factory(branch='develop'):
    factory = BuildFactory()

    if branch == 'master':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-switch',
                description="brew switching",
                descriptionDone="brew switch",
                command=['brew', 'switch', 'qt5', '5.3.2']
            )
        ]: factory.addStep(step)
    else:
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                name='brew-switch',
                description="brew switching",
                descriptionDone="brew switch",
                command=['brew', 'switch', 'qt5', '5.4.0']
            )
        ]: factory.addStep(step)

    for step in [
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/go-ethereum.git',
            branch = branch,
            mode = 'incremental',
            codebase = 'go-ethereum',
            retry=(5, 3)
        ),
        Git(
            haltOnFailure = True,
            logEnviron = False,
            repourl = 'https://github.com/ethereum/homebrew-ethereum.git',
            branch = 'master',
            mode = 'incremental',
            codebase = 'homebrew-ethereum',
            retry=(5, 3),
            workdir = 'brew',
        )
    ]: factory.addStep(step)

    if branch == 'master':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update go-ethereum version',
                command = Interpolate('sed -i "" "s/^  version \'\(.*\)\'/  version \'%(prop:version)s-%(prop:protocol)s\'/" go-ethereum.rb'),
                workdir = 'brew',
            )
        ]: factory.addStep(step)

    if branch == 'develop':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update go-ethereum version',
                command = Interpolate('sed -i "" "s/^    version \'\(.*\)\'/    version \'%(prop:version)s-%(prop:protocol)s\'/" go-ethereum.rb'),
                workdir = 'brew',
            )
        ]: factory.addStep(step)

    for step in [
        ShellCommand(
            haltOnFailure = True,
            logEnviron = False,
            description = 'cleanup',
            descriptionDone = 'clean',
            command = ["brew", "remove", "go-ethereum"],
            workdir = 'brew',
            decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
        ),
        Compile(
            haltOnFailure = True,
            logEnviron = False,
            description = 'running brew',
            descriptionDone = 'brew',
            command = brew_install_cmd(cmd=['brew', 'install', 'go-ethereum.rb', '-v', '--build-bottle'], branch=branch),
            workdir = 'brew',
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = "brew bottle go-ethereum -v %s | sed -ne 's/.*Bottling \(.*\)\.\.\./\\1/p'" % ("--devel" if branch=='develop' else ""),
            description = "bottling",
            descriptionDone = "bottle",
            property = 'bottle',
            workdir = 'brew'
        ),
        SetPropertyFromCommand(
            haltOnFailure = True,
            logEnviron = False,
            command = Interpolate('sha1sum %(prop:bottle)s | grep -o -w "\w\{40\}"'),
            property = 'sha1sum',
            workdir = 'brew'
        ),
        FileUpload(
            haltOnFailure = True,
            name = 'upload-bottle',
            slavesrc=Interpolate("%(prop:bottle)s"),
            masterdest = Interpolate("public_html/builds/%(prop:buildername)s/%(prop:buildnumber)s/bottle/go-ethereum-%(prop:version)s-%(prop:protocol)s.yosemite.bottle.%(prop:buildnumber)s.tar.gz"),
            url = Interpolate("/builds/%(prop:buildername)s/%(prop:buildnumber)s/bottle/go-ethereum-%(prop:version)s-%(prop:protocol)s.yosemite.bottle.%(prop:buildnumber)s.tar.gz"),
            workdir = 'brew'
        )
    ]: factory.addStep(step)

    if branch=='master':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update bottle url',
                command = Interpolate('sed -i "" "s/^    root_url \'\(.*\)\'/    root_url \'http:\/\/build.ethdev.com\/builds\/%(kw:urlbuildername)s\/%(prop:buildnumber)s\/bottle\'/" go-ethereum.rb', urlbuildername=urlbuildername),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update brew revision',
                command = Interpolate('sed -i "" "s/^    revision \(.*\)/    revision %(prop:buildnumber)s/" go-ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'bump bottle',
                command = Interpolate('sed -i "" "s/^    sha1 \'\(.*\)\' => :yosemite/    sha1 \'%(prop:sha1sum)s\' => :yosemite/" go-ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git add',
                command = 'git add go-ethereum.rb',
                workdir = 'brew',
            ),
            ShellCommand(
                logEnviron = False,
                descriptionDone = 'git commit',
                command = Interpolate('git commit -m "bump go-ethereum to %(prop:version)s-%(prop:protocol)s at ethereum/go-ethereum@%(kw:go_revision)s"', go_revision=get_short_revision_go),
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git push',
                command = 'git pull --no-edit && git push',
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS}
            )
        ]: factory.addStep(step)

    if branch=='develop':
        for step in [
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update bottle url',
                command = Interpolate('sed -i "" "s/^      root_url \'\(.*\)\'/      root_url \'http:\/\/build.ethdev.com\/builds\/%(kw:urlbuildername)s\/%(prop:buildnumber)s\/bottle\'/" go-ethereum.rb', urlbuildername=urlbuildername),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'update brew revision',
                command = Interpolate('sed -i "" "s/^      revision \(.*\)/      revision %(prop:buildnumber)s/" go-ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'bump bottle',
                command = Interpolate('sed -i "" "s/^      sha1 \'\(.*\)\' => :yosemite/      sha1 \'%(prop:sha1sum)s\' => :yosemite/" go-ethereum.rb'),
                workdir = 'brew',
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git add',
                command = 'git add go-ethereum.rb',
                workdir = 'brew',
            ),
            ShellCommand(
                logEnviron = False,
                descriptionDone = 'git commit',
                command = Interpolate('git commit -m "bump go-ethereum to %(prop:version)s-%(prop:protocol)s at ethereum/go-ethereum@%(kw:go_revision)s"', go_revision=get_short_revision_go),
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:SUCCESS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'git push',
                command = 'git pull --no-edit && git push',
                workdir = 'brew',
                decodeRC = {0:SUCCESS,1:WARNINGS,2:WARNINGS}
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'unload',
                command = ['launchctl', 'unload', '/usr/local/opt/go-ethereum/homebrew.mxcl.go-ethereum.plist'],
            ),
            ShellCommand(
                haltOnFailure = True,
                logEnviron = False,
                descriptionDone = 'load',
                command = ['launchctl', 'load', '/usr/local/opt/go-ethereum/homebrew.mxcl.go-ethereum.plist'],
            ),
        ]: factory.addStep(step)

    return factory


#
# Builders
#
from buildbot.config import BuilderConfig

c['builders'] = []

# Self-update builder
for builder in [
    BuilderConfig(
        name="buildbot",
        builddir="build-self",
        slavenames=["selfslave"],
        factory=self_update_factory(),
        locks=[self_lock.access('exclusive')])
]: c['builders'].append(builder)

# Buildslave builders
for buildslave in ['one', 'two']:
    for builder in [
        BuilderConfig(
            name="buildslave-cpp-%s" % buildslave,
            builddir="build-buildslave-cpp-%s" % buildslave,
            slavenames=["buildslave-%s" % buildslave],
            factory=buildslave_factory("cpp", "cpp-ethereum"),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="buildslave-go-%s" % buildslave,
            builddir="build-buildslave-go-%s" % buildslave,
            slavenames=["buildslave-%s" % buildslave],
            factory=buildslave_factory("go", "go-ethereum"),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="buildslave-python-%s" % buildslave,
            builddir="build-buildslave-python-%s" % buildslave,
            slavenames=["buildslave-%s" % buildslave],
            factory=buildslave_factory("python", "pyethereum"),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="buildslave-java-%s" % buildslave,
            builddir="build-buildslave-java-%s" % buildslave,
            slavenames=["buildslave-%s" % buildslave],
            factory=buildslave_factory("java", "ethereumj"),
            locks=[build_lock.access('counting')])
    ]: c['builders'].append(builder)

for branch in ['master', 'develop']:
    for builder in [
        BuilderConfig(
            name="Linux C++ %s branch" % branch,
            builddir="build-cpp-ethereum-%s-docker" % branch,
            slavenames=[
                "slave-cpp%s" % ("" if branch == 'master' else "-develop"),
                "slave-cpp-one%s" % ("" if branch == 'master' else "-develop")],
            factory=cpp_ethereum_factory(branch=branch, deb=True),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="Linux C++ %s server" % branch,
            builddir="build-cpp-ethereum-%s-server" % branch,
            slavenames=["poc-server-%s" % branch],
            factory=cpp_ethereum_server_factory(branch=branch),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="Linux C++ %s evmjit" % branch,
            builddir="build-cpp-ethereum-%s-evmjit" % branch,
            slavenames=[
                "slave-cpp%s" % ("" if branch == 'master' else "-develop"),
                "slave-cpp-one%s" % ("" if branch == 'master' else "-develop")],
            factory=cpp_ethereum_factory(branch=branch, deb=True, evmjit=True),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="Linux Go %s branch" % branch,
            builddir="build-go-ethereum-%s-docker" % branch,
            slavenames=[
                "slave-go%s" % ("" if branch == 'master' else "-develop"),
                "slave-go-one%s" % ("" if branch == 'master' else "-develop")],
            factory=go_ethereum_factory(branch=branch, deb=True),
            locks=[go_lock.access('counting')]),
        BuilderConfig(
            name="OSX C++ %s branch" % branch,
            builddir="build-cpp-osx-%s" % branch,
            slavenames=["osx"],
            factory=osx_cpp_factory(branch=branch),
            locks=[osx_lock.access('counting')]),
        BuilderConfig(
            name="OSX C++ %s evmjit" % branch,
            builddir="build-cpp-osx-%s-evmjit" % branch,
            slavenames=["osx"],
            factory=osx_cpp_factory(branch=branch, evmjit=True),
            locks=[osx_lock.access('counting')]),
        BuilderConfig(
            name="OSX Go %s branch" % branch,
            builddir="build-go-osx-%s" % branch,
            slavenames=["osx"],
            factory=osx_go_factory(branch=branch),
            locks=[osx_lock.access('counting')]),
        BuilderConfig(
            name="OSX C++ %s brew" % branch,
            builddir="build-cpp-osx-%s-brew" % branch,
            slavenames=["osx"],
            factory=brew_cpp_factory(branch=branch),
            locks=[brew_lock.access('counting')]),
        BuilderConfig(
            name="OSX Go %s brew" % branch,
            builddir="build-go-ethereum-%s-brew" % branch,
            slavenames=["osx"],
            factory=brew_go_factory(branch=branch),
            locks=[brew_lock.access('counting')]),
        BuilderConfig(
            name="Windows C++ %s branch" % branch,
            builddir="build-cpp-ethereum-%s-win" % branch,
            slavenames=["winslave"],
            factory=win_cpp_factory(branch=branch),
            locks=[win_lock.access('counting')]),
        BuilderConfig(
            name="Linux PyEthereum %s" % branch,
            builddir="build-pyethereum-%s" % branch,
            slavenames=["slave-python", "slave-python-one"],
            factory=pyethereum_factory(branch=branch),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="Linux Serpent %s" % branch,
            builddir="build-serpent-%s" % branch,
            slavenames=["slave-python", "slave-python-one"],
            factory=serpent_factory(branch=branch),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="OSX PyEthereum %s" % branch,
            builddir="build-pyethereum-osx-%s" % branch,
            slavenames=["osx"],
            factory=pyethereum_factory(branch=branch),
            locks=[osx_lock.access('counting')]),
        BuilderConfig(
            name="OSX Serpent %s" % branch,
            builddir="build-serpent-osx-%s" % branch,
            slavenames=["osx"],
            factory=serpent_factory(branch=branch),
            locks=[osx_lock.access('counting')]),

        # Extra checks
        BuilderConfig(
            name="Linux C++ %s check" % branch,
            builddir="build-cpp-ethereum-%s-check" % branch,
            slavenames=["slave-cpp", "slave-cpp-one"],
            factory=cpp_check_factory(branch=branch),
            locks=[build_lock.access('counting')]),
        BuilderConfig(
            name="OSX C++ %s check" % branch,
            builddir="build-cpp-ethereum-%s-osx-check" % branch,
            slavenames=["osx"],
            factory=osx_cpp_check_factory(branch=branch),
            locks=[osx_lock.access('counting')])
    ]: c['builders'].append(builder)

    # deb packaging
    for architecture in ['i386', 'amd64']:
        for distribution in ['trusty', 'utopic']:
            for builder in [
                BuilderConfig(
                    name="Linux C++ %s deb %s-%s" % (branch, architecture, distribution),
                    builddir="build-cpp-ethereum-%s-%s-%s" % (branch, architecture, distribution),
                    slavenames=["slave-cpp-deb", "slave-cpp-one-deb"],
                    factory=deb_factory(
                        name="ethereum",
                        repourl="https://github.com/ethereum/cpp-ethereum.git",
                        ppabranch="master",
                        branch=branch,
                        architecture=architecture,
                        distribution=distribution),
                    locks=[package_lock.access('counting')]),
                BuilderConfig(
                    name="Linux Go %s deb %s-%s" % (branch, architecture, distribution),
                    builddir="build-go-ethereum-%s-%s-%s" % (branch, architecture, distribution),
                    slavenames=["slave-go-deb", "slave-go-one-deb"],
                    factory=deb_factory(
                        name="go-ethereum",
                        repourl="https://github.com/ethereum/go-ethereum.git",
                        ppabranch="go-ethereum%s" % ("-develop" if branch=='develop' else ""),
                        branch=branch,
                        architecture=architecture,
                        distribution=distribution),
                    locks=[package_lock.access('counting')])
            ]: c['builders'].append(builder)

# deps deb packaging
# for architecture in ['i386', 'amd64']:
for distribution in ['trusty', 'utopic']:
    for builder in [
        BuilderConfig(
            name="libcryptopp %s-%s" % ("amd64", distribution),
            builddir="build-libcryptopp-%s-%s" % ("amd64", distribution),
            slavenames=["slave-cpp-deb", "slave-cpp-one-deb"],
            factory=deb_factory(
                name="libcryptopp",
                repourl="https://github.com/mmoss/cryptopp.git",
                ppabranch="libcrypto++",
                branch="master",
                architecture="amd64",
                distribution=distribution),
            locks=[package_lock.access('counting')]),
        BuilderConfig(
            name="libjson-rpc-cpp %s-%s" % ("amd64", distribution),
            builddir="build-libjson-rpc-cpp-%s-%s" % ("amd64", distribution),
            slavenames=["slave-cpp-deb", "slave-cpp-one-deb"],
            factory=deb_factory(
                name="libjson-rpc-cpp",
                repourl="https://github.com/cinemast/libjson-rpc-cpp.git",
                ppabranch="libjson-rpc-cpp",
                branch="master",
                architecture="amd64",
                distribution=distribution),
            locks=[package_lock.access('counting')])
    ]: c['builders'].append(builder)

for builder in [
    BuilderConfig(
        name="Linux EthereumJ",
        builddir="build-ethereumj-docker",
        slavenames=["slave-java", "slave-java-one"],
        factory=ethereumj_factory(),
        locks=[build_lock.access('counting')]),

    # Pull requests
    # Linux
    BuilderConfig(
        name="Linux C++ pull requests",
        builddir="build-cpp-ethereum-pr",
        slavenames=["slave-cpp-pr", "slave-cpp-one-pr"],
        factory=cpp_ethereum_factory(branch='develop'),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="Linux Go pull requests",
        builddir="build-go-ethereum-pr",
        slavenames=["slave-go-pr", "slave-go-one-pr"],
        factory=go_ethereum_factory(branch='develop'),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="Linux PyEthereum PRs",
        builddir="build-pyethereum-pr",
        slavenames=["slave-python-pr", "slave-python-one-pr"],
        factory=pyethereum_factory(branch='develop'),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="Linux Serpent PRs",
        builddir="build-serpent-pr",
        slavenames=["slave-python-pr", "slave-python-one-pr"],
        factory=serpent_factory(branch='develop'),
        locks=[build_lock.access('counting')]),
    BuilderConfig(
        name="Linux EthereumJ PRs",
        builddir="build-ethereumj-pr",
        slavenames=["slave-java-pr", "slave-java-one-pr"],
        factory=ethereumj_factory(branch='master'),
        locks=[build_lock.access('counting')]),

    # OSX
    BuilderConfig(
        name="OSX C++ pull requests",
        builddir="build-cpp-ethereum-osx-pr",
        slavenames=["osx"],
        factory=osx_cpp_factory(branch='develop', isPullRequest=True),
        locks=[osx_lock.access('counting')]),
    BuilderConfig(
        name="OSX Go pull requests",
        builddir="build-go-ethereum-osx-pr",
        slavenames=["osx"],
        factory=osx_go_factory(branch='develop', isPullRequest=True),
        locks=[osx_lock.access('counting')]),
    BuilderConfig(
        name="OSX PyEthereum PRs",
        builddir="build-pyethereum-osx-pr",
        slavenames=["osx"],
        factory=pyethereum_factory(branch='develop'),
        locks=[osx_lock.access('counting')]),
    BuilderConfig(
        name="OSX Serpent PRs",
        builddir="build-serpent-osx-pr",
        slavenames=["osx"],
        factory=serpent_factory(branch='develop'),
        locks=[osx_lock.access('counting')]),

    # Windows
    BuilderConfig(
        name="Windows C++ pull requests",
        builddir="build-cpp-ethereum-win-pr",
        slavenames=["winslave"],
        factory=win_cpp_factory(branch='develop', isPullRequest=True),
        locks=[win_lock.access('counting')])

]: c['builders'].append(builder)


def prioritizeBuilders(buildmaster, builders):
    builderPriorities = {
        "Linux C++ develop evmjit": 0,
        "Linux C++ develop branch": 0,
        "Linux C++ master branch": 1,
        "Linux Go develop branch": 0,
        "Linux Go master branch": 1,
        "OSX C++ develop evmjit": 0,
        "OSX C++ develop branch": 0,
        "OSX C++ master branch": 1,
        "OSX Go develop branch": 0,
        "OSX Go master branch": 1,
        "Windows C++ develop branch": 0,
        "Windows C++ master branch": 1
    }
    builders.sort(key=lambda b: builderPriorities.get(b.name, 2))
    return builders

c['prioritizeBuilders'] = prioritizeBuilders


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status import words
from buildbot.status.web import authz, auth
from buildbot.status.github import GitHubStatus
from buildstatusimage import BuildStatusImageResource

# Load users from external file, see users.json.sample
users = []
for user in json.load(open("users.json")):
    users.append((user['username'], user['password']))

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(users),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = 'auth',
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)


class WebStatus(html.WebStatus):
    def setupUsualPages(self, numbuilds, num_events, num_events_max):
        html.WebStatus.setupUsualPages(self, numbuilds, num_events, num_events_max)
        self.putChild("buildstatusimage", BuildStatusImageResource())

c['status'].append(WebStatus(
    http_port=8010,
    authz=authz_cfg,
    change_hook_auth=["file:changehook.passwd"],
    change_hook_dialects={'github': {}},
    order_console_by_time=True))


# IRC bot
ircbot = json.load(open("ircbot.json"))
c['status'].append(words.IRC(host=ircbot['server'],
                             nick=ircbot['nickname'],
                             password=ircbot['password'],
                             channels=ircbot['channels'],
                             notify_events={
                                'successToException': 1,
                                'successToFailure': 1,
                                'failureToSuccess': 1,
                                'exceptionToSuccess': 1}))


# GitHub Status
tokens = json.load(open("tokens.json"))
for repo in tokens:
    gs = GitHubStatus(
        token=tokens[repo]["token"],
        repoOwner=tokens[repo]["owner"],
        repoName=repo,
        sha=Interpolate("%(src:"+repo+":revision)s"),
        startDescription='DEV build started.',
        endDescription='DEV build done.')
    c['status'].append(gs)


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Ethereum"
c['titleURL'] = "https://ethereum.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://build.ethdev.com/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
